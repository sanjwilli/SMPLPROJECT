
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 28 17:44:10 EST 2017
//----------------------------------------------------

package MySMPL.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import MySMPL.sys.SyntaxSmplException;
import MySMPL.values.SmplValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 28 17:44:10 EST 2017
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\006\006\000\002\006\006\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\005\000\002\007\003\000\002\007\003" +
    "\000\002\010\007\000\002\013\005\000\002\013\005\000" +
    "\002\011\004\000\002\011\003\000\002\012\005\000\002" +
    "\012\003\000\002\026\006\000\002\026\010\000\002\026" +
    "\004\000\002\027\004\000\002\027\006\000\002\030\004" +
    "\000\002\030\003\000\002\031\005\000\002\031\003\000" +
    "\002\032\010\000\002\032\006\000\002\040\005\000\002" +
    "\040\003\000\002\041\005\000\002\041\003\000\002\042" +
    "\004\000\002\042\003\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\003\000\002\044\005\000\002" +
    "\044\005\000\002\044\003\000\002\045\005\000\002\045" +
    "\005\000\002\045\003\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\003\000\002\047\004\000" +
    "\002\047\003\000\002\050\005\000\002\050\003\000\002" +
    "\051\004\000\002\051\004\000\002\051\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\005\000\002\053\003\000\002\053\003\000\002" +
    "\055\003\000\002\055\003\000\002\054\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\010\000" +
    "\002\016\006\000\002\017\006\000\002\020\006\000\002" +
    "\021\012\000\002\033\004\000\002\033\003\000\002\034" +
    "\005\000\002\034\003\000\002\022\006\000\002\022\005" +
    "\000\002\022\003\000\002\023\005\000\002\035\005\000" +
    "\002\035\003\000\002\036\004\000\002\036\003\000\002" +
    "\037\005\000\002\037\003\000\002\024\006\000\002\025" +
    "\006\000\002\056\010\000\002\057\010\000\002\062\005" +
    "\000\002\060\010\000\002\060\006\000\002\061\006\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\063\005\000\002\064\005\000\002\065" +
    "\007\000\002\066\004\000\002\066\003\000\002\067\006" +
    "\000\002\070\005\000\002\070\005\000\002\071\004\000" +
    "\002\071\003\000\002\072\005\000\002\072\003\000\002" +
    "\074\006\000\002\074\006\000\002\074\006\000\002\074" +
    "\006\000\002\074\006\000\002\074\006\000\002\076\006" +
    "\000\002\076\006\000\002\077\014\000\002\100\012\000" +
    "\002\100\012\000\002\101\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\134\005\034\007\032\011\135\016\137\020" +
    "\102\023\100\032\004\041\036\044\uff68\045\104\046\061" +
    "\047\125\050\054\051\073\052\051\053\105\054\023\055" +
    "\043\056\133\057\027\060\062\061\140\062\116\063\040" +
    "\064\014\065\042\066\106\071\120\072\124\073\136\075" +
    "\022\076\071\077\052\100\113\101\037\102\070\103\101" +
    "\104\056\110\117\112\030\113\006\114\005\115\050\116" +
    "\122\117\064\001\002\000\106\005\034\011\135\016\137" +
    "\020\102\023\100\045\104\046\061\047\125\050\054\053" +
    "\105\054\023\056\133\057\027\060\062\061\140\062\116" +
    "\064\014\065\042\072\124\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\070\006\uffb2\010\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\042\uffb2\043\uffb2\067\uffb2\070\uffb2\106" +
    "\uffb2\111\uffb2\001\002\000\070\006\uffb5\010\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5\043" +
    "\uffb5\067\uffb5\070\uffb5\106\uffb5\111\uffb5\001\002\000\130" +
    "\005\u0154\007\032\011\135\016\137\020\102\023\100\032" +
    "\004\041\036\045\104\046\061\047\125\050\054\051\073" +
    "\052\051\053\105\054\023\055\043\056\133\057\027\060" +
    "\062\061\140\062\116\064\014\065\042\066\106\071\120" +
    "\072\124\073\136\075\022\076\071\077\052\100\113\101" +
    "\037\102\070\103\101\104\056\110\117\112\030\113\006" +
    "\114\005\115\050\116\122\117\145\001\002\000\070\006" +
    "\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\042\uffbc\043\uffbc\067\uffbc\070\uffbc\106\uffbc\111" +
    "\uffbc\001\002\000\070\006\uffae\010\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\042\uffae\043\uffae\067" +
    "\uffae\070\uffae\106\uffae\111\uffae\001\002\000\140\002\ufffe" +
    "\005\ufffe\007\ufffe\010\ufffe\011\ufffe\016\ufffe\020\ufffe\023" +
    "\ufffe\032\ufffe\041\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\071\ufffe\072\ufffe\073\ufffe\075\ufffe\076" +
    "\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe" +
    "\110\ufffe\112\ufffe\113\ufffe\114\ufffe\115\ufffe\116\ufffe\117" +
    "\ufffe\001\002\000\070\006\uffc4\010\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\u0152\030\uffc4\031\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\067" +
    "\uffc4\070\uffc4\106\uffc4\111\uffc4\001\002\000\004\005\u0150" +
    "\001\002\000\030\006\ufff6\010\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\021\ufff6\067\ufff6\070\ufff6\106\ufff6\111\ufff6" +
    "\001\002\000\070\006\uffb0\010\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\042\uffb0\043\uffb0\067\uffb0" +
    "\070\uffb0\106\uffb0\111\uffb0\001\002\000\034\006\uffdb\010" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\021\uffdb\042\267" +
    "\043\uffdb\067\uffdb\070\uffdb\106\uffdb\111\uffdb\001\002\000" +
    "\060\006\uffcd\010\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\021\uffcd\022\230\023\231\030\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd" +
    "\067\uffcd\070\uffcd\106\uffcd\111\uffcd\001\002\000\030\006" +
    "\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\021\ufff4" +
    "\067\ufff4\070\ufff4\106\ufff4\111\ufff4\001\002\000\004\005" +
    "\u014d\001\002\000\072\004\uff93\006\uff93\010\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\021\uff93\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\042\uff93\043" +
    "\uff93\067\uff93\070\uff93\106\uff93\111\uff93\001\002\000\070" +
    "\006\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\042\uffc2\043\uffc2\067\uffc2\070\uffc2\106\uffc2" +
    "\111\uffc2\001\002\000\070\006\uffb8\010\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\042\uffb8\043\uffb8" +
    "\067\uffb8\070\uffb8\106\uffb8\111\uffb8\001\002\000\030\006" +
    "\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\021\ufff3" +
    "\067\ufff3\070\ufff3\106\ufff3\111\ufff3\001\002\000\004\005" +
    "\u0148\001\002\000\070\006\uffb6\010\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6\043\uffb6\067" +
    "\uffb6\070\uffb6\106\uffb6\111\uffb6\001\002\000\070\006\uffb1" +
    "\010\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\042\uffb1\043\uffb1\067\uffb1\070\uffb1\106\uffb1\111\uffb1" +
    "\001\002\000\134\005\034\007\032\011\135\016\137\020" +
    "\102\023\100\032\004\041\036\044\uff68\045\104\046\061" +
    "\047\125\050\054\051\073\052\051\053\105\054\023\055" +
    "\043\056\133\057\027\060\062\061\140\062\116\063\040" +
    "\064\014\065\042\066\106\071\120\072\124\073\136\075" +
    "\022\076\071\077\052\100\113\101\037\102\070\103\101" +
    "\104\056\110\117\112\030\113\006\114\005\115\050\116" +
    "\122\117\064\001\002\000\072\004\u0143\006\uffad\010\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\042" +
    "\uffad\043\uffad\067\uffad\070\uffad\106\uffad\111\uffad\001\002" +
    "\000\130\005\034\007\032\011\135\016\137\020\102\023" +
    "\100\032\004\041\036\045\104\046\061\047\125\050\054" +
    "\051\073\052\051\053\105\054\023\055\043\056\133\057" +
    "\027\060\062\061\140\062\116\064\014\065\042\066\106" +
    "\071\120\072\124\073\136\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\030\006\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\021\ufff2\067\ufff2\070\ufff2\106\ufff2\111\ufff2\001\002\000" +
    "\110\005\034\011\135\016\137\020\102\023\100\032\004" +
    "\045\104\046\061\047\125\050\054\053\105\054\023\056" +
    "\133\057\027\060\062\061\140\062\116\064\014\065\042" +
    "\072\124\075\022\076\071\077\052\100\113\101\037\102" +
    "\070\103\101\104\056\110\117\112\030\113\006\114\005" +
    "\115\050\116\122\117\145\001\002\000\004\005\u013a\001" +
    "\002\000\004\117\u0138\001\002\000\070\006\uff9f\010\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\042" +
    "\uff9f\043\uff9f\067\uff9f\070\uff9f\106\uff9f\111\uff9f\001\002" +
    "\000\004\005\u0136\001\002\000\006\005\u012e\117\u012f\001" +
    "\002\000\070\006\uffa6\010\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\042\uffa6\043\uffa6\067\uffa6\070" +
    "\uffa6\106\uffa6\111\uffa6\001\002\000\070\006\uffa2\010\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\042" +
    "\uffa2\043\uffa2\067\uffa2\070\uffa2\106\uffa2\111\uffa2\001\002" +
    "\000\070\006\uffab\010\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\042\uffab\043\uffab\067\uffab\070\uffab" +
    "\106\uffab\111\uffab\001\002\000\046\013\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\042" +
    "\uffb9\043\uffb9\044\u012c\001\002\000\070\006\uffb3\010\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\042" +
    "\uffb3\043\uffb3\067\uffb3\070\uffb3\106\uffb3\111\uffb3\001\002" +
    "\000\004\005\u0129\001\002\000\004\005\u0126\001\002\000" +
    "\070\006\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\042\uffaa\043\uffaa\067\uffaa\070\uffaa\106" +
    "\uffaa\111\uffaa\001\002\000\004\005\u0123\001\002\000\066" +
    "\006\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6" +
    "\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\042\uffc6\043\uffc6\067\uffc6\070\uffc6\106\uffc6\111\uffc6" +
    "\001\002\000\130\005\034\007\032\011\135\016\137\020" +
    "\102\023\100\032\004\041\036\045\104\046\061\047\125" +
    "\050\054\051\073\052\051\053\105\054\023\055\043\056" +
    "\133\057\027\060\062\061\140\062\116\064\014\065\042" +
    "\066\106\071\120\072\124\073\136\075\022\076\071\077" +
    "\052\100\113\101\037\102\070\103\101\104\056\110\117" +
    "\112\030\113\006\114\005\115\050\116\122\117\145\001" +
    "\002\000\034\006\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\021\uffd9\042\uffd9\043\uffd9\067\uffd9\070\uffd9\106" +
    "\uffd9\111\uffd9\001\002\000\070\006\uffa7\010\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\042\uffa7\043" +
    "\uffa7\067\uffa7\070\uffa7\106\uffa7\111\uffa7\001\002\000\004" +
    "\005\u0117\001\002\000\004\005\u0112\001\002\000\070\006" +
    "\uffa4\010\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\042\uffa4\043\uffa4\067\uffa4\070\uffa4\106\uffa4\111" +
    "\uffa4\001\002\000\056\004\153\005\154\011\155\013\uffba" +
    "\015\u010d\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\042\uffba\043\uffba\044\uff68\001\002\000" +
    "\070\006\uffaf\010\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\042\uffaf\043\uffaf\067\uffaf\070\uffaf\106" +
    "\uffaf\111\uffaf\001\002\000\136\002\001\005\034\007\032" +
    "\011\135\016\137\020\102\023\100\032\004\041\036\044" +
    "\uff68\045\104\046\061\047\125\050\054\051\073\052\051" +
    "\053\105\054\023\055\043\056\133\057\027\060\062\061" +
    "\140\062\116\063\040\064\014\065\042\066\106\071\120" +
    "\072\124\073\136\075\022\076\071\077\052\100\113\101" +
    "\037\102\070\103\101\104\056\110\117\112\030\113\006" +
    "\114\005\115\050\116\122\117\064\001\002\000\004\013" +
    "\u010b\001\002\000\004\005\u0108\001\002\000\004\005\u0105" +
    "\001\002\000\070\006\uffbd\010\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd\067\uffbd" +
    "\070\uffbd\106\uffbd\111\uffbd\001\002\000\004\005\u0102\001" +
    "\002\000\070\006\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\042\uffbb\043\uffbb\067\uffbb\070" +
    "\uffbb\106\uffbb\111\uffbb\001\002\000\070\006\uffa5\010\uffa5" +
    "\012\uffa5\013\uffa5\014\uffa5\015\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042" +
    "\uffa5\043\uffa5\067\uffa5\070\uffa5\106\uffa5\111\uffa5\001\002" +
    "\000\004\002\u0101\001\002\000\070\006\uffac\010\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042\uffac" +
    "\043\uffac\067\uffac\070\uffac\106\uffac\111\uffac\001\002\000" +
    "\102\005\034\011\135\020\102\045\104\046\061\047\125" +
    "\050\054\053\105\054\023\056\133\057\027\060\062\061" +
    "\140\062\116\064\014\065\042\072\124\075\022\076\071" +
    "\077\052\100\113\101\037\102\070\103\101\104\056\110" +
    "\117\112\030\113\006\114\005\115\050\116\122\117\145" +
    "\001\002\000\004\005\373\001\002\000\132\005\034\007" +
    "\032\011\135\016\137\020\102\021\uff68\023\100\032\004" +
    "\041\036\045\104\046\061\047\125\050\054\051\073\052" +
    "\051\053\105\054\023\055\043\056\133\057\027\060\062" +
    "\061\140\062\116\064\014\065\042\066\106\071\120\072" +
    "\124\073\136\075\022\076\071\077\052\100\113\101\037" +
    "\102\070\103\101\104\056\110\117\112\030\113\006\114" +
    "\005\115\050\116\122\117\145\001\002\000\004\013\356" +
    "\001\002\000\004\005\351\001\002\000\004\005\346\001" +
    "\002\000\130\005\034\007\032\011\135\016\137\020\102" +
    "\023\100\032\004\041\036\045\104\046\061\047\125\050" +
    "\054\051\073\052\051\053\105\054\023\055\043\056\133" +
    "\057\027\060\062\061\140\062\116\064\014\065\042\066" +
    "\106\071\120\072\124\073\136\075\022\076\071\077\052" +
    "\100\113\101\037\102\070\103\101\104\056\110\117\112" +
    "\030\113\006\114\005\115\050\116\122\117\145\001\002" +
    "\000\066\006\uffca\010\uffca\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\234\025\235\026\233" +
    "\030\uffca\031\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\042\uffca\043\uffca\067\uffca\070\uffca\106\uffca" +
    "\111\uffca\001\002\000\030\006\ufff5\010\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\021\ufff5\067\ufff5\070\ufff5\106\ufff5" +
    "\111\ufff5\001\002\000\004\044\335\001\002\000\010\006" +
    "\uffe1\017\uffe1\044\uffe1\001\002\000\004\005\332\001\002" +
    "\000\070\006\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\042\uffa9\043\uffa9\067\uffa9\070\uffa9" +
    "\106\uffa9\111\uffa9\001\002\000\070\006\uffa1\010\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\042\uffa1" +
    "\043\uffa1\067\uffa1\070\uffa1\106\uffa1\111\uffa1\001\002\000" +
    "\004\005\327\001\002\000\006\055\043\117\312\001\002" +
    "\000\004\007\271\001\002\000\030\006\uffef\010\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\021\uffef\067\uffef\070\uffef" +
    "\106\uffef\111\uffef\001\002\000\070\006\uffb4\010\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\042\uffb4" +
    "\043\uffb4\067\uffb4\070\uffb4\106\uffb4\111\uffb4\001\002\000" +
    "\032\006\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\021\ufff0\043\265\067\ufff0\070\ufff0\106\ufff0\111\ufff0\001" +
    "\002\000\004\005\262\001\002\000\004\005\257\001\002" +
    "\000\070\006\uffa0\010\uffa0\012\uffa0\013\uffa0\014\uffa0\015" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\042\uffa0\043\uffa0\067\uffa0\070\uffa0" +
    "\106\uffa0\111\uffa0\001\002\000\050\006\uffd7\010\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\021\uffd7\033\244\034\245" +
    "\035\243\036\246\037\247\040\250\042\uffd7\043\uffd7\067" +
    "\uffd7\070\uffd7\106\uffd7\111\uffd7\001\002\000\140\002\ufffb" +
    "\005\ufffb\007\ufffb\010\ufffb\011\ufffb\016\ufffb\020\ufffb\023" +
    "\ufffb\032\ufffb\041\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\071\ufffb\072\ufffb\073\ufffb\075\ufffb\076" +
    "\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb" +
    "\110\ufffb\112\ufffb\113\ufffb\114\ufffb\115\ufffb\116\ufffb\117" +
    "\ufffb\001\002\000\070\006\uffa8\010\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\042\uffa8\043\uffa8\067" +
    "\uffa8\070\uffa8\106\uffa8\111\uffa8\001\002\000\054\006\uffd0" +
    "\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\021\uffd0\030" +
    "\225\031\226\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\042\uffd0\043\uffd0\067\uffd0\070\uffd0\106\uffd0\111" +
    "\uffd0\001\002\000\004\005\216\001\002\000\070\006\uffbf" +
    "\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\042\uffbf\043\uffbf\067\uffbf\070\uffbf\106\uffbf\111\uffbf" +
    "\001\002\000\132\005\034\007\032\011\135\012\uff68\016" +
    "\137\020\102\023\100\032\004\041\036\045\104\046\061" +
    "\047\125\050\054\051\073\052\051\053\105\054\023\055" +
    "\043\056\133\057\027\060\062\061\140\062\116\064\014" +
    "\065\042\066\106\071\120\072\124\073\136\075\022\076" +
    "\071\077\052\100\113\101\037\102\070\103\101\104\056" +
    "\110\117\112\030\113\006\114\005\115\050\116\122\117" +
    "\145\001\002\000\004\005\174\001\002\000\102\005\034" +
    "\011\135\020\102\045\104\046\061\047\125\050\054\053" +
    "\105\054\023\056\133\057\027\060\062\061\140\062\116" +
    "\064\014\065\042\072\124\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\004\005\143\001\002\000\070\006\uffbe\010\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\042\uffbe\043" +
    "\uffbe\067\uffbe\070\uffbe\106\uffbe\111\uffbe\001\002\000\070" +
    "\006\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\042\uffa3\043\uffa3\067\uffa3\070\uffa3\106\uffa3" +
    "\111\uffa3\001\002\000\130\005\034\007\032\011\135\016" +
    "\137\020\102\023\100\032\004\041\036\045\104\046\061" +
    "\047\125\050\054\051\073\052\051\053\105\054\023\055" +
    "\043\056\133\057\027\060\062\061\140\062\116\064\014" +
    "\065\042\066\106\071\120\072\124\073\136\075\022\076" +
    "\071\077\052\100\113\101\037\102\070\103\101\104\056" +
    "\110\117\112\030\113\006\114\005\115\050\116\122\117" +
    "\145\001\002\000\070\006\uffb9\010\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\043\uffb9\067" +
    "\uffb9\070\uffb9\106\uffb9\111\uffb9\001\002\000\076\004\153" +
    "\005\154\006\uffba\010\uffba\011\155\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\037\uffba\040\uffba\042\uffba\043\uffba\067\uffba" +
    "\070\uffba\106\uffba\111\uffba\001\002\000\006\006\150\015" +
    "\147\001\002\000\130\005\034\007\032\011\135\016\137" +
    "\020\102\023\100\032\004\041\036\045\104\046\061\047" +
    "\125\050\054\051\073\052\051\053\105\054\023\055\043" +
    "\056\133\057\027\060\062\061\140\062\116\064\014\065" +
    "\042\066\106\071\120\072\124\073\136\075\022\076\071" +
    "\077\052\100\113\101\037\102\070\103\101\104\056\110" +
    "\117\112\030\113\006\114\005\115\050\116\122\117\145" +
    "\001\002\000\070\006\uff85\010\uff85\012\uff85\013\uff85\014" +
    "\uff85\015\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\030\uff85\031\uff85\033\uff85\034\uff85\035" +
    "\uff85\036\uff85\037\uff85\040\uff85\042\uff85\043\uff85\067\uff85" +
    "\070\uff85\106\uff85\111\uff85\001\002\000\004\006\152\001" +
    "\002\000\070\006\uff86\010\uff86\012\uff86\013\uff86\014\uff86" +
    "\015\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\033\uff86\034\uff86\035\uff86" +
    "\036\uff86\037\uff86\040\uff86\042\uff86\043\uff86\067\uff86\070" +
    "\uff86\106\uff86\111\uff86\001\002\000\012\011\135\053\105" +
    "\054\023\117\172\001\002\000\132\005\034\006\uff68\007" +
    "\032\011\135\016\137\020\102\023\100\032\004\041\036" +
    "\045\104\046\061\047\125\050\054\051\073\052\051\053" +
    "\105\054\023\055\043\056\133\057\027\060\062\061\140" +
    "\062\116\064\014\065\042\066\106\071\120\072\124\073" +
    "\136\075\022\076\071\077\052\100\113\101\037\102\070" +
    "\103\101\104\056\110\117\112\030\113\006\114\005\115" +
    "\050\116\122\117\145\001\002\000\130\005\034\007\032" +
    "\011\135\016\137\020\102\023\100\032\004\041\036\045" +
    "\104\046\061\047\125\050\054\051\073\052\051\053\105" +
    "\054\023\055\043\056\133\057\027\060\062\061\140\062" +
    "\116\064\014\065\042\066\106\071\120\072\124\073\136" +
    "\075\022\076\071\077\052\100\113\101\037\102\070\103" +
    "\101\104\056\110\117\112\030\113\006\114\005\115\050" +
    "\116\122\117\145\001\002\000\004\012\157\001\002\000" +
    "\072\006\uff8b\010\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\042\uff8b\043\uff8b\044\uff8b\067\uff8b\070" +
    "\uff8b\106\uff8b\111\uff8b\001\002\000\004\006\170\001\002" +
    "\000\012\006\uff68\012\uff68\013\uff68\015\163\001\002\000" +
    "\010\006\uff98\012\uff98\013\uff98\001\002\000\130\005\034" +
    "\007\032\011\135\016\137\020\102\023\100\032\004\041" +
    "\036\045\104\046\061\047\125\050\054\051\073\052\051" +
    "\053\105\054\023\055\043\056\133\057\027\060\062\061" +
    "\140\062\116\064\014\065\042\066\106\071\120\072\124" +
    "\073\136\075\022\076\071\077\052\100\113\101\037\102" +
    "\070\103\101\104\056\110\117\112\030\113\006\114\005" +
    "\115\050\116\122\117\145\001\002\000\010\006\uff99\012" +
    "\uff99\013\uff99\001\002\000\010\006\uff96\012\uff96\013\uff96" +
    "\001\002\000\012\006\uff68\012\uff68\013\uff68\015\163\001" +
    "\002\000\010\006\uff97\012\uff97\013\uff97\001\002\000\070" +
    "\006\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\067\uffdd\070\uffdd\106\uffdd" +
    "\111\uffdd\001\002\000\070\006\uff80\010\uff80\012\uff80\013" +
    "\uff80\014\uff80\015\uff80\021\uff80\022\uff80\023\uff80\024\uff80" +
    "\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\042\uff80\043\uff80" +
    "\067\uff80\070\uff80\106\uff80\111\uff80\001\002\000\070\006" +
    "\uff82\010\uff82\012\uff82\013\uff82\014\uff82\015\uff82\021\uff82" +
    "\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030" +
    "\uff82\031\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82" +
    "\040\uff82\042\uff82\043\uff82\067\uff82\070\uff82\106\uff82\111" +
    "\uff82\001\002\000\070\006\uffc1\010\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1\067" +
    "\uffc1\070\uffc1\106\uffc1\111\uffc1\001\002\000\006\006\uff68" +
    "\117\200\001\002\000\004\006\uffea\001\002\000\006\006" +
    "\uff68\015\207\001\002\000\004\006\205\001\002\000\006" +
    "\033\201\074\202\001\002\000\130\005\034\007\032\011" +
    "\135\016\137\020\102\023\100\032\004\041\036\045\104" +
    "\046\061\047\125\050\054\051\073\052\051\053\105\054" +
    "\023\055\043\056\133\057\027\060\062\061\140\062\116" +
    "\064\014\065\042\066\106\071\120\072\124\073\136\075" +
    "\022\076\071\077\052\100\113\101\037\102\070\103\101" +
    "\104\056\110\117\112\030\113\006\114\005\115\050\116" +
    "\122\117\145\001\002\000\130\005\034\007\032\011\135" +
    "\016\137\020\102\023\100\032\004\041\036\045\104\046" +
    "\061\047\125\050\054\051\073\052\051\053\105\054\023" +
    "\055\043\056\133\057\027\060\062\061\140\062\116\064" +
    "\014\065\042\066\106\071\120\072\124\073\136\075\022" +
    "\076\071\077\052\100\113\101\037\102\070\103\101\104" +
    "\056\110\117\112\030\113\006\114\005\115\050\116\122" +
    "\117\145\001\002\000\006\006\uffec\015\uffec\001\002\000" +
    "\006\006\uffed\015\uffed\001\002\000\130\005\034\007\032" +
    "\011\135\016\137\020\102\023\100\032\004\041\036\045" +
    "\104\046\061\047\125\050\054\051\073\052\051\053\105" +
    "\054\023\055\043\056\133\057\027\060\062\061\140\062" +
    "\116\064\014\065\042\066\106\071\120\072\124\073\136" +
    "\075\022\076\071\077\052\100\113\101\037\102\070\103" +
    "\101\104\056\110\117\112\030\113\006\114\005\115\050" +
    "\116\122\117\145\001\002\000\030\006\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\021\uffee\067\uffee\070\uffee" +
    "\106\uffee\111\uffee\001\002\000\004\117\200\001\002\000" +
    "\004\006\uffe8\001\002\000\004\006\uffeb\001\002\000\006" +
    "\006\uff68\015\207\001\002\000\004\006\uffe9\001\002\000" +
    "\004\012\215\001\002\000\072\004\uff94\006\uff94\010\uff94" +
    "\012\uff94\013\uff94\014\uff94\015\uff94\021\uff94\022\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\042" +
    "\uff94\043\uff94\067\uff94\070\uff94\106\uff94\111\uff94\001\002" +
    "\000\130\005\034\007\032\011\135\016\137\020\102\023" +
    "\100\032\004\041\036\045\104\046\061\047\125\050\054" +
    "\051\073\052\051\053\105\054\023\055\043\056\133\057" +
    "\027\060\062\061\140\062\116\064\014\065\042\066\106" +
    "\071\120\072\124\073\136\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\004\015\220\001\002\000\130\005\034\007\032\011\135" +
    "\016\137\020\102\023\100\032\004\041\036\045\104\046" +
    "\061\047\125\050\054\051\073\052\051\053\105\054\023" +
    "\055\043\056\133\057\027\060\062\061\140\062\116\064" +
    "\014\065\042\066\106\071\120\072\124\073\136\075\022" +
    "\076\071\077\052\100\113\101\037\102\070\103\101\104" +
    "\056\110\117\112\030\113\006\114\005\115\050\116\122" +
    "\117\145\001\002\000\004\015\222\001\002\000\130\005" +
    "\034\007\032\011\135\016\137\020\102\023\100\032\004" +
    "\041\036\045\104\046\061\047\125\050\054\051\073\052" +
    "\051\053\105\054\023\055\043\056\133\057\027\060\062" +
    "\061\140\062\116\064\014\065\042\066\106\071\120\072" +
    "\124\073\136\075\022\076\071\077\052\100\113\101\037" +
    "\102\070\103\101\104\056\110\117\112\030\113\006\114" +
    "\005\115\050\116\122\117\145\001\002\000\004\006\224" +
    "\001\002\000\070\006\uff9a\010\uff9a\012\uff9a\013\uff9a\014" +
    "\uff9a\015\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\042\uff9a\043\uff9a\067\uff9a" +
    "\070\uff9a\106\uff9a\111\uff9a\001\002\000\110\005\034\011" +
    "\135\016\137\020\102\023\100\032\004\045\104\046\061" +
    "\047\125\050\054\053\105\054\023\056\133\057\027\060" +
    "\062\061\140\062\116\064\014\065\042\072\124\075\022" +
    "\076\071\077\052\100\113\101\037\102\070\103\101\104" +
    "\056\110\117\112\030\113\006\114\005\115\050\116\122" +
    "\117\145\001\002\000\110\005\034\011\135\016\137\020" +
    "\102\023\100\032\004\045\104\046\061\047\125\050\054" +
    "\053\105\054\023\056\133\057\027\060\062\061\140\062" +
    "\116\064\014\065\042\072\124\075\022\076\071\077\052" +
    "\100\113\101\037\102\070\103\101\104\056\110\117\112" +
    "\030\113\006\114\005\115\050\116\122\117\145\001\002" +
    "\000\060\006\uffce\010\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\021\uffce\022\230\023\231\030\uffce\031\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043" +
    "\uffce\067\uffce\070\uffce\106\uffce\111\uffce\001\002\000\110" +
    "\005\034\011\135\016\137\020\102\023\100\032\004\045" +
    "\104\046\061\047\125\050\054\053\105\054\023\056\133" +
    "\057\027\060\062\061\140\062\116\064\014\065\042\072" +
    "\124\075\022\076\071\077\052\100\113\101\037\102\070" +
    "\103\101\104\056\110\117\112\030\113\006\114\005\115" +
    "\050\116\122\117\145\001\002\000\110\005\034\011\135" +
    "\016\137\020\102\023\100\032\004\045\104\046\061\047" +
    "\125\050\054\053\105\054\023\056\133\057\027\060\062" +
    "\061\140\062\116\064\014\065\042\072\124\075\022\076" +
    "\071\077\052\100\113\101\037\102\070\103\101\104\056" +
    "\110\117\112\030\113\006\114\005\115\050\116\122\117" +
    "\145\001\002\000\066\006\uffcb\010\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\021\uffcb\022\uffcb\023\uffcb\024\234\025" +
    "\235\026\233\030\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\067\uffcb\070" +
    "\uffcb\106\uffcb\111\uffcb\001\002\000\110\005\034\011\135" +
    "\016\137\020\102\023\100\032\004\045\104\046\061\047" +
    "\125\050\054\053\105\054\023\056\133\057\027\060\062" +
    "\061\140\062\116\064\014\065\042\072\124\075\022\076" +
    "\071\077\052\100\113\101\037\102\070\103\101\104\056" +
    "\110\117\112\030\113\006\114\005\115\050\116\122\117" +
    "\145\001\002\000\110\005\034\011\135\016\137\020\102" +
    "\023\100\032\004\045\104\046\061\047\125\050\054\053" +
    "\105\054\023\056\133\057\027\060\062\061\140\062\116" +
    "\064\014\065\042\072\124\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\110\005\034\011\135\016\137\020\102\023\100\032\004" +
    "\045\104\046\061\047\125\050\054\053\105\054\023\056" +
    "\133\057\027\060\062\061\140\062\116\064\014\065\042" +
    "\072\124\075\022\076\071\077\052\100\113\101\037\102" +
    "\070\103\101\104\056\110\117\112\030\113\006\114\005" +
    "\115\050\116\122\117\145\001\002\000\066\006\uffc8\010" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8" +
    "\043\uffc8\067\uffc8\070\uffc8\106\uffc8\111\uffc8\001\002\000" +
    "\066\006\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\042\uffc9\043\uffc9\067\uffc9\070\uffc9\106\uffc9\111" +
    "\uffc9\001\002\000\066\006\uffc7\010\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\067\uffc7\070" +
    "\uffc7\106\uffc7\111\uffc7\001\002\000\066\006\uffcc\010\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\234\025\235\026\233\030\uffcc\031\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043" +
    "\uffcc\067\uffcc\070\uffcc\106\uffcc\111\uffcc\001\002\000\060" +
    "\006\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\021" +
    "\uffcf\022\230\023\231\030\uffcf\031\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\067" +
    "\uffcf\070\uffcf\106\uffcf\111\uffcf\001\002\000\110\005\034" +
    "\011\135\016\137\020\102\023\100\032\004\045\104\046" +
    "\061\047\125\050\054\053\105\054\023\056\133\057\027" +
    "\060\062\061\140\062\116\064\014\065\042\072\124\075" +
    "\022\076\071\077\052\100\113\101\037\102\070\103\101" +
    "\104\056\110\117\112\030\113\006\114\005\115\050\116" +
    "\122\117\145\001\002\000\110\005\034\011\135\016\137" +
    "\020\102\023\100\032\004\045\104\046\061\047\125\050" +
    "\054\053\105\054\023\056\133\057\027\060\062\061\140" +
    "\062\116\064\014\065\042\072\124\075\022\076\071\077" +
    "\052\100\113\101\037\102\070\103\101\104\056\110\117" +
    "\112\030\113\006\114\005\115\050\116\122\117\145\001" +
    "\002\000\110\005\034\011\135\016\137\020\102\023\100" +
    "\032\004\045\104\046\061\047\125\050\054\053\105\054" +
    "\023\056\133\057\027\060\062\061\140\062\116\064\014" +
    "\065\042\072\124\075\022\076\071\077\052\100\113\101" +
    "\037\102\070\103\101\104\056\110\117\112\030\113\006" +
    "\114\005\115\050\116\122\117\145\001\002\000\110\005" +
    "\034\011\135\016\137\020\102\023\100\032\004\045\104" +
    "\046\061\047\125\050\054\053\105\054\023\056\133\057" +
    "\027\060\062\061\140\062\116\064\014\065\042\072\124" +
    "\075\022\076\071\077\052\100\113\101\037\102\070\103" +
    "\101\104\056\110\117\112\030\113\006\114\005\115\050" +
    "\116\122\117\145\001\002\000\110\005\034\011\135\016" +
    "\137\020\102\023\100\032\004\045\104\046\061\047\125" +
    "\050\054\053\105\054\023\056\133\057\027\060\062\061" +
    "\140\062\116\064\014\065\042\072\124\075\022\076\071" +
    "\077\052\100\113\101\037\102\070\103\101\104\056\110" +
    "\117\112\030\113\006\114\005\115\050\116\122\117\145" +
    "\001\002\000\110\005\034\011\135\016\137\020\102\023" +
    "\100\032\004\045\104\046\061\047\125\050\054\053\105" +
    "\054\023\056\133\057\027\060\062\061\140\062\116\064" +
    "\014\065\042\072\124\075\022\076\071\077\052\100\113" +
    "\101\037\102\070\103\101\104\056\110\117\112\030\113" +
    "\006\114\005\115\050\116\122\117\145\001\002\000\054" +
    "\006\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\021" +
    "\uffd1\030\225\031\226\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\042\uffd1\043\uffd1\067\uffd1\070\uffd1\106" +
    "\uffd1\111\uffd1\001\002\000\054\006\uffd2\010\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\021\uffd2\030\225\031\226\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2" +
    "\043\uffd2\067\uffd2\070\uffd2\106\uffd2\111\uffd2\001\002\000" +
    "\054\006\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\021\uffd3\030\225\031\226\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\042\uffd3\043\uffd3\067\uffd3\070\uffd3" +
    "\106\uffd3\111\uffd3\001\002\000\054\006\uffd5\010\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\021\uffd5\030\225\031\226" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042" +
    "\uffd5\043\uffd5\067\uffd5\070\uffd5\106\uffd5\111\uffd5\001\002" +
    "\000\054\006\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\021\uffd6\030\225\031\226\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\067\uffd6\070" +
    "\uffd6\106\uffd6\111\uffd6\001\002\000\054\006\uffd4\010\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\021\uffd4\030\225\031" +
    "\226\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\042\uffd4\043\uffd4\067\uffd4\070\uffd4\106\uffd4\111\uffd4\001" +
    "\002\000\130\005\034\007\032\011\135\016\137\020\102" +
    "\023\100\032\004\041\036\045\104\046\061\047\125\050" +
    "\054\051\073\052\051\053\105\054\023\055\043\056\133" +
    "\057\027\060\062\061\140\062\116\064\014\065\042\066" +
    "\106\071\120\072\124\073\136\075\022\076\071\077\052" +
    "\100\113\101\037\102\070\103\101\104\056\110\117\112" +
    "\030\113\006\114\005\115\050\116\122\117\145\001\002" +
    "\000\004\006\261\001\002\000\070\006\uff9c\010\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\042\uff9c" +
    "\043\uff9c\067\uff9c\070\uff9c\106\uff9c\111\uff9c\001\002\000" +
    "\130\005\034\007\032\011\135\016\137\020\102\023\100" +
    "\032\004\041\036\045\104\046\061\047\125\050\054\051" +
    "\073\052\051\053\105\054\023\055\043\056\133\057\027" +
    "\060\062\061\140\062\116\064\014\065\042\066\106\071" +
    "\120\072\124\073\136\075\022\076\071\077\052\100\113" +
    "\101\037\102\070\103\101\104\056\110\117\112\030\113" +
    "\006\114\005\115\050\116\122\117\145\001\002\000\004" +
    "\006\264\001\002\000\070\006\uff8a\010\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\033\uff8a\034" +
    "\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\042\uff8a\043\uff8a" +
    "\067\uff8a\070\uff8a\106\uff8a\111\uff8a\001\002\000\112\005" +
    "\034\011\135\016\137\020\102\023\100\032\004\041\036" +
    "\045\104\046\061\047\125\050\054\053\105\054\023\056" +
    "\133\057\027\060\062\061\140\062\116\064\014\065\042" +
    "\072\124\075\022\076\071\077\052\100\113\101\037\102" +
    "\070\103\101\104\056\110\117\112\030\113\006\114\005" +
    "\115\050\116\122\117\145\001\002\000\034\006\uffdc\010" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\021\uffdc\042\267" +
    "\043\uffdc\067\uffdc\070\uffdc\106\uffdc\111\uffdc\001\002\000" +
    "\112\005\034\011\135\016\137\020\102\023\100\032\004" +
    "\041\036\045\104\046\061\047\125\050\054\053\105\054" +
    "\023\056\133\057\027\060\062\061\140\062\116\064\014" +
    "\065\042\072\124\075\022\076\071\077\052\100\113\101" +
    "\037\102\070\103\101\104\056\110\117\112\030\113\006" +
    "\114\005\115\050\116\122\117\145\001\002\000\034\006" +
    "\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\021\uffda" +
    "\042\uffda\043\uffda\067\uffda\070\uffda\106\uffda\111\uffda\001" +
    "\002\000\134\005\034\007\032\010\uff68\011\135\016\137" +
    "\020\102\023\100\032\004\041\036\045\104\046\061\047" +
    "\125\050\054\051\073\052\051\053\105\054\023\055\043" +
    "\056\133\057\027\060\062\061\140\062\116\064\014\065" +
    "\042\066\106\067\274\071\120\072\124\073\136\075\022" +
    "\076\071\077\052\100\113\101\037\102\070\103\101\104" +
    "\056\110\117\112\030\113\006\114\005\115\050\116\122" +
    "\117\145\001\002\000\004\010\310\001\002\000\006\010" +
    "\uff68\015\303\001\002\000\004\014\301\001\002\000\004" +
    "\014\277\001\002\000\004\010\uff76\001\002\000\130\005" +
    "\034\007\032\011\135\016\137\020\102\023\100\032\004" +
    "\041\036\045\104\046\061\047\125\050\054\051\073\052" +
    "\051\053\105\054\023\055\043\056\133\057\027\060\062" +
    "\061\140\062\116\064\014\065\042\066\106\071\120\072" +
    "\124\073\136\075\022\076\071\077\052\100\113\101\037" +
    "\102\070\103\101\104\056\110\117\112\030\113\006\114" +
    "\005\115\050\116\122\117\145\001\002\000\006\010\uff79" +
    "\015\uff79\001\002\000\130\005\034\007\032\011\135\016" +
    "\137\020\102\023\100\032\004\041\036\045\104\046\061" +
    "\047\125\050\054\051\073\052\051\053\105\054\023\055" +
    "\043\056\133\057\027\060\062\061\140\062\116\064\014" +
    "\065\042\066\106\071\120\072\124\073\136\075\022\076" +
    "\071\077\052\100\113\101\037\102\070\103\101\104\056" +
    "\110\117\112\030\113\006\114\005\115\050\116\122\117" +
    "\145\001\002\000\006\010\uff78\015\uff78\001\002\000\132" +
    "\005\034\007\032\011\135\016\137\020\102\023\100\032" +
    "\004\041\036\045\104\046\061\047\125\050\054\051\073" +
    "\052\051\053\105\054\023\055\043\056\133\057\027\060" +
    "\062\061\140\062\116\064\014\065\042\066\106\067\274" +
    "\071\120\072\124\073\136\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\004\010\uff74\001\002\000\004\010\uff77\001\002\000\006" +
    "\010\uff68\015\303\001\002\000\004\010\uff75\001\002\000" +
    "\030\006\uff7a\010\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a" +
    "\021\uff7a\067\uff7a\070\uff7a\106\uff7a\111\uff7a\001\002\000" +
    "\004\111\321\001\002\000\004\111\313\001\002\000\004" +
    "\005\314\001\002\000\004\117\315\001\002\000\004\107" +
    "\316\001\002\000\130\005\034\007\032\011\135\016\137" +
    "\020\102\023\100\032\004\041\036\045\104\046\061\047" +
    "\125\050\054\051\073\052\051\053\105\054\023\055\043" +
    "\056\133\057\027\060\062\061\140\062\116\064\014\065" +
    "\042\066\106\071\120\072\124\073\136\075\022\076\071" +
    "\077\052\100\113\101\037\102\070\103\101\104\056\110" +
    "\117\112\030\113\006\114\005\115\050\116\122\117\145" +
    "\001\002\000\004\006\320\001\002\000\070\006\uff69\010" +
    "\uff69\012\uff69\013\uff69\014\uff69\015\uff69\021\uff69\022\uff69" +
    "\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69\031" +
    "\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69" +
    "\042\uff69\043\uff69\067\uff69\070\uff69\106\uff69\111\uff69\001" +
    "\002\000\004\005\322\001\002\000\004\117\323\001\002" +
    "\000\004\107\324\001\002\000\130\005\034\007\032\011" +
    "\135\016\137\020\102\023\100\032\004\041\036\045\104" +
    "\046\061\047\125\050\054\051\073\052\051\053\105\054" +
    "\023\055\043\056\133\057\027\060\062\061\140\062\116" +
    "\064\014\065\042\066\106\071\120\072\124\073\136\075" +
    "\022\076\071\077\052\100\113\101\037\102\070\103\101" +
    "\104\056\110\117\112\030\113\006\114\005\115\050\116" +
    "\122\117\145\001\002\000\004\006\326\001\002\000\070" +
    "\006\uff6a\010\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\021" +
    "\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a" +
    "\030\uff6a\031\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037" +
    "\uff6a\040\uff6a\042\uff6a\043\uff6a\067\uff6a\070\uff6a\106\uff6a" +
    "\111\uff6a\001\002\000\130\005\034\007\032\011\135\016" +
    "\137\020\102\023\100\032\004\041\036\045\104\046\061" +
    "\047\125\050\054\051\073\052\051\053\105\054\023\055" +
    "\043\056\133\057\027\060\062\061\140\062\116\064\014" +
    "\065\042\066\106\071\120\072\124\073\136\075\022\076" +
    "\071\077\052\100\113\101\037\102\070\103\101\104\056" +
    "\110\117\112\030\113\006\114\005\115\050\116\122\117" +
    "\145\001\002\000\004\006\331\001\002\000\070\006\uff84" +
    "\010\uff84\012\uff84\013\uff84\014\uff84\015\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040" +
    "\uff84\042\uff84\043\uff84\067\uff84\070\uff84\106\uff84\111\uff84" +
    "\001\002\000\130\005\034\007\032\011\135\016\137\020" +
    "\102\023\100\032\004\041\036\045\104\046\061\047\125" +
    "\050\054\051\073\052\051\053\105\054\023\055\043\056" +
    "\133\057\027\060\062\061\140\062\116\064\014\065\042" +
    "\066\106\071\120\072\124\073\136\075\022\076\071\077" +
    "\052\100\113\101\037\102\070\103\101\104\056\110\117" +
    "\112\030\113\006\114\005\115\050\116\122\117\145\001" +
    "\002\000\004\006\334\001\002\000\070\006\uff70\010\uff70" +
    "\012\uff70\013\uff70\014\uff70\015\uff70\021\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70" +
    "\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\042" +
    "\uff70\043\uff70\067\uff70\070\uff70\106\uff70\111\uff70\001\002" +
    "\000\132\005\034\007\032\011\135\013\uff68\016\137\020" +
    "\102\023\100\032\004\041\036\045\104\046\061\047\125" +
    "\050\054\051\073\052\051\053\105\054\023\055\043\056" +
    "\133\057\027\060\062\061\140\062\116\064\014\065\042" +
    "\066\106\071\120\072\124\073\136\075\022\076\071\077" +
    "\052\100\113\101\037\102\070\103\101\104\056\110\117" +
    "\112\030\113\006\114\005\115\050\116\122\117\145\001" +
    "\002\000\004\013\ufffa\001\002\000\004\070\340\001\002" +
    "\000\130\005\034\007\032\011\135\016\137\020\102\023" +
    "\100\032\004\041\036\045\104\046\061\047\125\050\054" +
    "\051\073\052\051\053\105\054\023\055\043\056\133\057" +
    "\027\060\062\061\140\062\116\064\014\065\042\066\106" +
    "\071\120\072\124\073\136\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\030\006\uff68\010\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\021\uff68\067\342\070\uff68\106\uff68\111\uff68\001\002\000" +
    "\130\005\034\007\032\011\135\016\137\020\102\023\100" +
    "\032\004\041\036\045\104\046\061\047\125\050\054\051" +
    "\073\052\051\053\105\054\023\055\043\056\133\057\027" +
    "\060\062\061\140\062\116\064\014\065\042\066\106\071" +
    "\120\072\124\073\136\075\022\076\071\077\052\100\113" +
    "\101\037\102\070\103\101\104\056\110\117\112\030\113" +
    "\006\114\005\115\050\116\122\117\145\001\002\000\030" +
    "\006\uff7b\010\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\021" +
    "\uff7b\067\uff7b\070\uff7b\106\uff7b\111\uff7b\001\002\000\030" +
    "\006\uff7d\010\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\021" +
    "\uff7d\067\uff7d\070\uff7d\106\uff7d\111\uff7d\001\002\000\030" +
    "\006\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\021" +
    "\uff7c\067\uff7c\070\uff7c\106\uff7c\111\uff7c\001\002\000\132" +
    "\005\034\006\uff68\007\032\011\135\016\137\020\102\023" +
    "\100\032\004\041\036\045\104\046\061\047\125\050\054" +
    "\051\073\052\051\053\105\054\023\055\043\056\133\057" +
    "\027\060\062\061\140\062\116\064\014\065\042\066\106" +
    "\071\120\072\124\073\136\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\004\006\350\001\002\000\072\004\uff95\006\uff95\010\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\042" +
    "\uff95\043\uff95\067\uff95\070\uff95\106\uff95\111\uff95\001\002" +
    "\000\130\005\034\007\032\011\135\016\137\020\102\023" +
    "\100\032\004\041\036\045\104\046\061\047\125\050\054" +
    "\051\073\052\051\053\105\054\023\055\043\056\133\057" +
    "\027\060\062\061\140\062\116\064\014\065\042\066\106" +
    "\071\120\072\124\073\136\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\004\015\353\001\002\000\130\005\034\007\032\011\135" +
    "\016\137\020\102\023\100\032\004\041\036\045\104\046" +
    "\061\047\125\050\054\051\073\052\051\053\105\054\023" +
    "\055\043\056\133\057\027\060\062\061\140\062\116\064" +
    "\014\065\042\066\106\071\120\072\124\073\136\075\022" +
    "\076\071\077\052\100\113\101\037\102\070\103\101\104" +
    "\056\110\117\112\030\113\006\114\005\115\050\116\122" +
    "\117\145\001\002\000\004\006\355\001\002\000\070\006" +
    "\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\042\uff9e\043\uff9e\067\uff9e\070\uff9e\106\uff9e\111" +
    "\uff9e\001\002\000\140\002\ufffc\005\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\016\ufffc\020\ufffc\023\ufffc\032\ufffc\041\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\071\ufffc" +
    "\072\ufffc\073\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101" +
    "\ufffc\102\ufffc\103\ufffc\104\ufffc\110\ufffc\112\ufffc\113\ufffc" +
    "\114\ufffc\115\ufffc\116\ufffc\117\ufffc\001\002\000\004\021" +
    "\372\001\002\000\006\015\365\021\uff68\001\002\000\010" +
    "\014\363\015\uff90\021\uff90\001\002\000\004\021\uff8e\001" +
    "\002\000\130\005\034\007\032\011\135\016\137\020\102" +
    "\023\100\032\004\041\036\045\104\046\061\047\125\050" +
    "\054\051\073\052\051\053\105\054\023\055\043\056\133" +
    "\057\027\060\062\061\140\062\116\064\014\065\042\066" +
    "\106\071\120\072\124\073\136\075\022\076\071\077\052" +
    "\100\113\101\037\102\070\103\101\104\056\110\117\112" +
    "\030\113\006\114\005\115\050\116\122\117\145\001\002" +
    "\000\006\015\uff91\021\uff91\001\002\000\130\005\034\007" +
    "\032\011\135\016\137\020\102\023\100\032\004\041\036" +
    "\045\104\046\061\047\125\050\054\051\073\052\051\053" +
    "\105\054\023\055\043\056\133\057\027\060\062\061\140" +
    "\062\116\064\014\065\042\066\106\071\120\072\124\073" +
    "\136\075\022\076\071\077\052\100\113\101\037\102\070" +
    "\103\101\104\056\110\117\112\030\113\006\114\005\115" +
    "\050\116\122\117\145\001\002\000\004\021\uff8f\001\002" +
    "\000\004\021\uff8c\001\002\000\006\015\365\021\uff68\001" +
    "\002\000\004\021\uff8d\001\002\000\070\006\uff92\010\uff92" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\042" +
    "\uff92\043\uff92\067\uff92\070\uff92\106\uff92\111\uff92\001\002" +
    "\000\006\055\043\117\375\001\002\000\004\006\377\001" +
    "\002\000\004\006\376\001\002\000\070\006\uff6c\010\uff6c" +
    "\012\uff6c\013\uff6c\014\uff6c\015\uff6c\021\uff6c\022\uff6c\023" +
    "\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c" +
    "\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\042" +
    "\uff6c\043\uff6c\067\uff6c\070\uff6c\106\uff6c\111\uff6c\001\002" +
    "\000\070\006\uff6d\010\uff6d\012\uff6d\013\uff6d\014\uff6d\015" +
    "\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d" +
    "\027\uff6d\030\uff6d\031\uff6d\033\uff6d\034\uff6d\035\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\042\uff6d\043\uff6d\067\uff6d\070\uff6d" +
    "\106\uff6d\111\uff6d\001\002\000\070\006\uffc0\010\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0" +
    "\043\uffc0\067\uffc0\070\uffc0\106\uffc0\111\uffc0\001\002\000" +
    "\004\002\000\001\002\000\130\005\034\007\032\011\135" +
    "\016\137\020\102\023\100\032\004\041\036\045\104\046" +
    "\061\047\125\050\054\051\073\052\051\053\105\054\023" +
    "\055\043\056\133\057\027\060\062\061\140\062\116\064" +
    "\014\065\042\066\106\071\120\072\124\073\136\075\022" +
    "\076\071\077\052\100\113\101\037\102\070\103\101\104" +
    "\056\110\117\112\030\113\006\114\005\115\050\116\122" +
    "\117\145\001\002\000\004\006\u0104\001\002\000\030\006" +
    "\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\021\ufff8" +
    "\067\ufff8\070\ufff8\106\ufff8\111\ufff8\001\002\000\130\005" +
    "\034\007\032\011\135\016\137\020\102\023\100\032\004" +
    "\041\036\045\104\046\061\047\125\050\054\051\073\052" +
    "\051\053\105\054\023\055\043\056\133\057\027\060\062" +
    "\061\140\062\116\064\014\065\042\066\106\071\120\072" +
    "\124\073\136\075\022\076\071\077\052\100\113\101\037" +
    "\102\070\103\101\104\056\110\117\112\030\113\006\114" +
    "\005\115\050\116\122\117\145\001\002\000\004\006\u0107" +
    "\001\002\000\070\006\uff72\010\uff72\012\uff72\013\uff72\014" +
    "\uff72\015\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72" +
    "\026\uff72\027\uff72\030\uff72\031\uff72\033\uff72\034\uff72\035" +
    "\uff72\036\uff72\037\uff72\040\uff72\042\uff72\043\uff72\067\uff72" +
    "\070\uff72\106\uff72\111\uff72\001\002\000\130\005\034\007" +
    "\032\011\135\016\137\020\102\023\100\032\004\041\036" +
    "\045\104\046\061\047\125\050\054\051\073\052\051\053" +
    "\105\054\023\055\043\056\133\057\027\060\062\061\140" +
    "\062\116\064\014\065\042\066\106\071\120\072\124\073" +
    "\136\075\022\076\071\077\052\100\113\101\037\102\070" +
    "\103\101\104\056\110\117\112\030\113\006\114\005\115" +
    "\050\116\122\117\145\001\002\000\004\006\u010a\001\002" +
    "\000\070\006\uff6e\010\uff6e\012\uff6e\013\uff6e\014\uff6e\015" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\033\uff6e\034\uff6e\035\uff6e\036" +
    "\uff6e\037\uff6e\040\uff6e\042\uff6e\043\uff6e\067\uff6e\070\uff6e" +
    "\106\uff6e\111\uff6e\001\002\000\140\002\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\016\ufffd\020\ufffd\023\ufffd\032\ufffd" +
    "\041\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\075\ufffd\076\ufffd\077\ufffd" +
    "\100\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\110\ufffd\112" +
    "\ufffd\113\ufffd\114\ufffd\115\ufffd\116\ufffd\117\ufffd\001\002" +
    "\000\140\002\uffff\005\uffff\007\uffff\010\uffff\011\uffff\016" +
    "\uffff\020\uffff\023\uffff\032\uffff\041\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff" +
    "\063\uffff\064\uffff\065\uffff\066\uffff\071\uffff\072\uffff\073" +
    "\uffff\075\uffff\076\uffff\077\uffff\100\uffff\101\uffff\102\uffff" +
    "\103\uffff\104\uffff\110\uffff\112\uffff\113\uffff\114\uffff\115" +
    "\uffff\116\uffff\117\uffff\001\002\000\004\117\u0110\001\002" +
    "\000\010\006\uffe2\017\uffe2\044\uffe2\001\002\000\010\006" +
    "\uffdf\017\uffdf\044\uffdf\001\002\000\012\006\uff68\015\u010d" +
    "\017\uff68\044\uff68\001\002\000\010\006\uffe0\017\uffe0\044" +
    "\uffe0\001\002\000\130\005\034\007\032\011\135\016\137" +
    "\020\102\023\100\032\004\041\036\045\104\046\061\047" +
    "\125\050\054\051\073\052\051\053\105\054\023\055\043" +
    "\056\133\057\027\060\062\061\140\062\116\064\014\065" +
    "\042\066\106\071\120\072\124\073\136\075\022\076\071" +
    "\077\052\100\113\101\037\102\070\103\101\104\056\110" +
    "\117\112\030\113\006\114\005\115\050\116\122\117\145" +
    "\001\002\000\004\015\u0114\001\002\000\130\005\034\007" +
    "\032\011\135\016\137\020\102\023\100\032\004\041\036" +
    "\045\104\046\061\047\125\050\054\051\073\052\051\053" +
    "\105\054\023\055\043\056\133\057\027\060\062\061\140" +
    "\062\116\064\014\065\042\066\106\071\120\072\124\073" +
    "\136\075\022\076\071\077\052\100\113\101\037\102\070" +
    "\103\101\104\056\110\117\112\030\113\006\114\005\115" +
    "\050\116\122\117\145\001\002\000\004\006\u0116\001\002" +
    "\000\070\006\uff88\010\uff88\012\uff88\013\uff88\014\uff88\015" +
    "\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\033\uff88\034\uff88\035\uff88\036" +
    "\uff88\037\uff88\040\uff88\042\uff88\043\uff88\067\uff88\070\uff88" +
    "\106\uff88\111\uff88\001\002\000\130\005\034\007\032\011" +
    "\135\016\137\020\102\023\100\032\004\041\036\045\104" +
    "\046\061\047\125\050\054\051\073\052\051\053\105\054" +
    "\023\055\043\056\133\057\027\060\062\061\140\062\116" +
    "\064\014\065\042\066\106\071\120\072\124\073\136\075" +
    "\022\076\071\077\052\100\113\101\037\102\070\103\101" +
    "\104\056\110\117\112\030\113\006\114\005\115\050\116" +
    "\122\117\145\001\002\000\004\006\u0119\001\002\000\070" +
    "\006\uff9d\010\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\042\uff9d\043\uff9d\067\uff9d\070\uff9d\106\uff9d" +
    "\111\uff9d\001\002\000\004\106\u011b\001\002\000\004\117" +
    "\u011c\001\002\000\004\105\u011d\001\002\000\004\011\u011e" +
    "\001\002\000\130\005\034\007\032\011\135\016\137\020" +
    "\102\023\100\032\004\041\036\045\104\046\061\047\125" +
    "\050\054\051\073\052\051\053\105\054\023\055\043\056" +
    "\133\057\027\060\062\061\140\062\116\064\014\065\042" +
    "\066\106\071\120\072\124\073\136\075\022\076\071\077" +
    "\052\100\113\101\037\102\070\103\101\104\056\110\117" +
    "\112\030\113\006\114\005\115\050\116\122\117\145\001" +
    "\002\000\004\014\u0120\001\002\000\130\005\034\007\032" +
    "\011\135\016\137\020\102\023\100\032\004\041\036\045" +
    "\104\046\061\047\125\050\054\051\073\052\051\053\105" +
    "\054\023\055\043\056\133\057\027\060\062\061\140\062" +
    "\116\064\014\065\042\066\106\071\120\072\124\073\136" +
    "\075\022\076\071\077\052\100\113\101\037\102\070\103" +
    "\101\104\056\110\117\112\030\113\006\114\005\115\050" +
    "\116\122\117\145\001\002\000\004\012\u0122\001\002\000" +
    "\070\006\uff6b\010\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b" +
    "\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027" +
    "\uff6b\030\uff6b\031\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b" +
    "\037\uff6b\040\uff6b\042\uff6b\043\uff6b\067\uff6b\070\uff6b\106" +
    "\uff6b\111\uff6b\001\002\000\130\005\034\007\032\011\135" +
    "\016\137\020\102\023\100\032\004\041\036\045\104\046" +
    "\061\047\125\050\054\051\073\052\051\053\105\054\023" +
    "\055\043\056\133\057\027\060\062\061\140\062\116\064" +
    "\014\065\042\066\106\071\120\072\124\073\136\075\022" +
    "\076\071\077\052\100\113\101\037\102\070\103\101\104" +
    "\056\110\117\112\030\113\006\114\005\115\050\116\122" +
    "\117\145\001\002\000\004\006\u0125\001\002\000\070\006" +
    "\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\042\uff9b\043\uff9b\067\uff9b\070\uff9b\106\uff9b\111" +
    "\uff9b\001\002\000\130\005\034\007\032\011\135\016\137" +
    "\020\102\023\100\032\004\041\036\045\104\046\061\047" +
    "\125\050\054\051\073\052\051\053\105\054\023\055\043" +
    "\056\133\057\027\060\062\061\140\062\116\064\014\065" +
    "\042\066\106\071\120\072\124\073\136\075\022\076\071" +
    "\077\052\100\113\101\037\102\070\103\101\104\056\110" +
    "\117\112\030\113\006\114\005\115\050\116\122\117\145" +
    "\001\002\000\004\006\u0128\001\002\000\070\006\uff71\010" +
    "\uff71\012\uff71\013\uff71\014\uff71\015\uff71\021\uff71\022\uff71" +
    "\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031" +
    "\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71" +
    "\042\uff71\043\uff71\067\uff71\070\uff71\106\uff71\111\uff71\001" +
    "\002\000\130\005\034\007\032\011\135\016\137\020\102" +
    "\023\100\032\004\041\036\045\104\046\061\047\125\050" +
    "\054\051\073\052\051\053\105\054\023\055\043\056\133" +
    "\057\027\060\062\061\140\062\116\064\014\065\042\066" +
    "\106\071\120\072\124\073\136\075\022\076\071\077\052" +
    "\100\113\101\037\102\070\103\101\104\056\110\117\112" +
    "\030\113\006\114\005\115\050\116\122\117\145\001\002" +
    "\000\004\006\u012b\001\002\000\030\006\ufff7\010\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\021\ufff7\067\ufff7\070\ufff7" +
    "\106\ufff7\111\ufff7\001\002\000\130\005\034\007\032\011" +
    "\135\016\137\020\102\023\100\032\004\041\036\045\104" +
    "\046\061\047\125\050\054\051\073\052\051\053\105\054" +
    "\023\055\043\056\133\057\027\060\062\061\140\062\116" +
    "\064\014\065\042\066\106\071\120\072\124\073\136\075" +
    "\022\076\071\077\052\100\113\101\037\102\070\103\101" +
    "\104\056\110\117\112\030\113\006\114\005\115\050\116" +
    "\122\117\145\001\002\000\004\013\ufff9\001\002\000\010" +
    "\006\uff68\017\uff68\117\u0131\001\002\000\130\005\uffe5\007" +
    "\uffe5\011\uffe5\016\uffe5\020\uffe5\023\uffe5\032\uffe5\041\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\064\uffe5\065\uffe5\066\uffe5\071\uffe5\072\uffe5\073" +
    "\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5" +
    "\103\uffe5\104\uffe5\110\uffe5\112\uffe5\113\uffe5\114\uffe5\115" +
    "\uffe5\116\uffe5\117\uffe5\001\002\000\006\006\u0132\017\u0133" +
    "\001\002\000\010\006\uff68\015\u010d\017\uff68\001\002\000" +
    "\130\005\uffe7\007\uffe7\011\uffe7\016\uffe7\020\uffe7\023\uffe7" +
    "\032\uffe7\041\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\062\uffe7\064\uffe7\065\uffe7\066\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7" +
    "\101\uffe7\102\uffe7\103\uffe7\104\uffe7\110\uffe7\112\uffe7\113" +
    "\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7\001\002\000\004" +
    "\117\u0134\001\002\000\004\006\u0135\001\002\000\130\005" +
    "\uffe6\007\uffe6\011\uffe6\016\uffe6\020\uffe6\023\uffe6\032\uffe6" +
    "\041\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\071\uffe6\072" +
    "\uffe6\073\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6" +
    "\102\uffe6\103\uffe6\104\uffe6\110\uffe6\112\uffe6\113\uffe6\114" +
    "\uffe6\115\uffe6\116\uffe6\117\uffe6\001\002\000\004\006\u0137" +
    "\001\002\000\070\006\uff7e\010\uff7e\012\uff7e\013\uff7e\014" +
    "\uff7e\015\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e" +
    "\026\uff7e\027\uff7e\030\uff7e\031\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\042\uff7e\043\uff7e\067\uff7e" +
    "\070\uff7e\106\uff7e\111\uff7e\001\002\000\134\005\034\007" +
    "\032\011\135\016\137\020\102\023\100\032\004\041\036" +
    "\044\uff68\045\104\046\061\047\125\050\054\051\073\052" +
    "\051\053\105\054\023\055\043\056\133\057\027\060\062" +
    "\061\140\062\116\063\040\064\014\065\042\066\106\071" +
    "\120\072\124\073\136\075\022\076\071\077\052\100\113" +
    "\101\037\102\070\103\101\104\056\110\117\112\030\113" +
    "\006\114\005\115\050\116\122\117\064\001\002\000\140" +
    "\002\uff87\005\uff87\007\uff87\010\uff87\011\uff87\016\uff87\020" +
    "\uff87\023\uff87\032\uff87\041\uff87\044\uff87\045\uff87\046\uff87" +
    "\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055" +
    "\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87" +
    "\064\uff87\065\uff87\066\uff87\071\uff87\072\uff87\073\uff87\075" +
    "\uff87\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87" +
    "\104\uff87\110\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116" +
    "\uff87\117\uff87\001\002\000\130\005\034\007\032\011\135" +
    "\016\137\020\102\023\100\032\004\041\036\045\104\046" +
    "\061\047\125\050\054\051\073\052\051\053\105\054\023" +
    "\055\043\056\133\057\027\060\062\061\140\062\116\064" +
    "\014\065\042\066\106\071\120\072\124\073\136\075\022" +
    "\076\071\077\052\100\113\101\037\102\070\103\101\104" +
    "\056\110\117\112\030\113\006\114\005\115\050\116\122" +
    "\117\145\001\002\000\004\006\u013c\001\002\000\070\006" +
    "\uff6f\010\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\021\uff6f" +
    "\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f" +
    "\040\uff6f\042\uff6f\043\uff6f\067\uff6f\070\uff6f\106\uff6f\111" +
    "\uff6f\001\002\000\050\006\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\021\uffd8\033\244\034\245\035\243\036" +
    "\246\037\247\040\250\042\uffd8\043\uffd8\067\uffd8\070\uffd8" +
    "\106\uffd8\111\uffd8\001\002\000\004\006\u013f\001\002\000" +
    "\072\005\u0140\006\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\042\uffb7\043\uffb7\067\uffb7\070" +
    "\uffb7\106\uffb7\111\uffb7\001\002\000\132\005\034\006\uff68" +
    "\007\032\011\135\016\137\020\102\023\100\032\004\041" +
    "\036\045\104\046\061\047\125\050\054\051\073\052\051" +
    "\053\105\054\023\055\043\056\133\057\027\060\062\061" +
    "\140\062\116\064\014\065\042\066\106\071\120\072\124" +
    "\073\136\075\022\076\071\077\052\100\113\101\037\102" +
    "\070\103\101\104\056\110\117\112\030\113\006\114\005" +
    "\115\050\116\122\117\145\001\002\000\004\006\u0142\001" +
    "\002\000\070\006\uffde\010\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\042\uffde\043\uffde\067\uffde\070" +
    "\uffde\106\uffde\111\uffde\001\002\000\012\011\135\053\105" +
    "\054\023\117\u0145\001\002\000\070\006\uff83\010\uff83\012" +
    "\uff83\013\uff83\014\uff83\015\uff83\021\uff83\022\uff83\023\uff83" +
    "\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\033" +
    "\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\042\uff83" +
    "\043\uff83\067\uff83\070\uff83\106\uff83\111\uff83\001\002\000" +
    "\070\006\uff81\010\uff81\012\uff81\013\uff81\014\uff81\015\uff81" +
    "\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027" +
    "\uff81\030\uff81\031\uff81\033\uff81\034\uff81\035\uff81\036\uff81" +
    "\037\uff81\040\uff81\042\uff81\043\uff81\067\uff81\070\uff81\106" +
    "\uff81\111\uff81\001\002\000\136\005\034\007\032\010\u0147" +
    "\011\135\016\137\020\102\023\100\032\004\041\036\044" +
    "\uff68\045\104\046\061\047\125\050\054\051\073\052\051" +
    "\053\105\054\023\055\043\056\133\057\027\060\062\061" +
    "\140\062\116\063\040\064\014\065\042\066\106\071\120" +
    "\072\124\073\136\075\022\076\071\077\052\100\113\101" +
    "\037\102\070\103\101\104\056\110\117\112\030\113\006" +
    "\114\005\115\050\116\122\117\064\001\002\000\030\006" +
    "\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\021\ufff1" +
    "\067\ufff1\070\ufff1\106\ufff1\111\ufff1\001\002\000\130\005" +
    "\034\007\032\011\135\016\137\020\102\023\100\032\004" +
    "\041\036\045\104\046\061\047\125\050\054\051\073\052" +
    "\051\053\105\054\023\055\043\056\133\057\027\060\062" +
    "\061\140\062\116\064\014\065\042\066\106\071\120\072" +
    "\124\073\136\075\022\076\071\077\052\100\113\101\037" +
    "\102\070\103\101\104\056\110\117\112\030\113\006\114" +
    "\005\115\050\116\122\117\145\001\002\000\004\015\u014a" +
    "\001\002\000\130\005\034\007\032\011\135\016\137\020" +
    "\102\023\100\032\004\041\036\045\104\046\061\047\125" +
    "\050\054\051\073\052\051\053\105\054\023\055\043\056" +
    "\133\057\027\060\062\061\140\062\116\064\014\065\042" +
    "\066\106\071\120\072\124\073\136\075\022\076\071\077" +
    "\052\100\113\101\037\102\070\103\101\104\056\110\117" +
    "\112\030\113\006\114\005\115\050\116\122\117\145\001" +
    "\002\000\004\006\u014c\001\002\000\070\006\uff89\010\uff89" +
    "\012\uff89\013\uff89\014\uff89\015\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89" +
    "\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\042" +
    "\uff89\043\uff89\067\uff89\070\uff89\106\uff89\111\uff89\001\002" +
    "\000\130\005\034\007\032\011\135\016\137\020\102\023" +
    "\100\032\004\041\036\045\104\046\061\047\125\050\054" +
    "\051\073\052\051\053\105\054\023\055\043\056\133\057" +
    "\027\060\062\061\140\062\116\064\014\065\042\066\106" +
    "\071\120\072\124\073\136\075\022\076\071\077\052\100" +
    "\113\101\037\102\070\103\101\104\056\110\117\112\030" +
    "\113\006\114\005\115\050\116\122\117\145\001\002\000" +
    "\004\006\u014f\001\002\000\070\006\uff73\010\uff73\012\uff73" +
    "\013\uff73\014\uff73\015\uff73\021\uff73\022\uff73\023\uff73\024" +
    "\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\033\uff73" +
    "\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\042\uff73\043" +
    "\uff73\067\uff73\070\uff73\106\uff73\111\uff73\001\002\000\004" +
    "\006\u0151\001\002\000\070\006\uff7f\010\uff7f\012\uff7f\013" +
    "\uff7f\014\uff7f\015\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\042\uff7f\043\uff7f" +
    "\067\uff7f\070\uff7f\106\uff7f\111\uff7f\001\002\000\106\005" +
    "\034\011\135\016\137\020\102\023\100\045\104\046\061" +
    "\047\125\050\054\053\105\054\023\056\133\057\027\060" +
    "\062\061\140\062\116\064\014\065\042\072\124\075\022" +
    "\076\071\077\052\100\113\101\037\102\070\103\101\104" +
    "\056\110\117\112\030\113\006\114\005\115\050\116\122" +
    "\117\145\001\002\000\070\006\uffc3\010\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3" +
    "\067\uffc3\070\uffc3\106\uffc3\111\uffc3\001\002\000\132\005" +
    "\034\006\uff68\007\032\011\135\016\137\020\102\023\100" +
    "\032\004\041\036\045\104\046\061\047\125\050\054\051" +
    "\073\052\051\053\105\054\023\055\043\056\133\057\027" +
    "\060\062\061\140\062\116\064\014\065\042\066\106\071" +
    "\120\072\124\073\136\075\022\076\071\077\052\100\113" +
    "\101\037\102\070\103\101\104\056\110\117\112\030\113" +
    "\006\114\005\115\050\116\122\117\145\001\002\000\030" +
    "\006\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\021" +
    "\uffe4\067\uffe4\070\uffe4\106\uffe4\111\uffe4\001\002\000\004" +
    "\006\u0158\001\002\000\006\006\u013f\015\163\001\002\000" +
    "\030\006\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\021\uffe3\067\uffe3\070\uffe3\106\uffe3\111\uffe3\001\002\000" +
    "\070\006\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\u0152\030\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\042\uffc5\043\uffc5\067\uffc5\070\uffc5\106" +
    "\uffc5\111\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\150\002\075\003\065\004\011\005\066\006" +
    "\020\007\102\010\107\014\073\015\030\016\015\017\064" +
    "\020\010\021\052\022\032\023\076\024\046\025\045\026" +
    "\006\027\034\030\110\032\024\040\122\041\016\042\056" +
    "\043\126\044\131\045\017\046\106\047\054\050\012\051" +
    "\023\052\133\053\140\054\071\055\007\056\113\057\130" +
    "\060\057\061\043\062\127\063\062\064\141\065\025\067" +
    "\014\073\074\074\044\075\120\076\114\077\125\100\040" +
    "\101\111\001\001\000\072\014\073\015\030\016\015\017" +
    "\064\020\010\021\052\022\032\023\076\024\143\025\045" +
    "\032\024\050\u0158\051\023\052\133\053\140\054\071\055" +
    "\007\056\113\057\130\060\057\061\043\063\062\064\141" +
    "\073\074\074\044\076\114\077\125\100\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\132\006\020\007\u0154" +
    "\010\107\014\073\015\030\016\015\017\064\020\010\021" +
    "\052\022\032\023\076\024\143\025\045\026\006\027\034" +
    "\032\024\040\122\041\016\042\056\043\126\044\131\045" +
    "\017\046\106\047\054\050\012\051\023\052\133\053\140" +
    "\054\071\055\007\056\113\057\130\060\057\061\043\063" +
    "\062\064\141\065\025\067\014\073\074\074\044\075\120" +
    "\076\114\077\125\100\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\146\003\u0145\004\011\005\066\006\020\007" +
    "\102\010\107\014\073\015\030\016\015\017\064\020\010" +
    "\021\052\022\032\023\076\024\046\025\045\026\006\027" +
    "\034\030\110\032\024\040\122\041\016\042\056\043\126" +
    "\044\131\045\017\046\106\047\054\050\012\051\023\052" +
    "\133\053\140\054\071\055\007\056\113\057\130\060\057" +
    "\061\043\062\127\063\062\064\141\065\025\067\014\073" +
    "\074\074\044\075\120\076\114\077\125\100\040\101\111" +
    "\001\001\000\002\001\001\000\132\006\020\007\u013d\010" +
    "\107\014\073\015\030\016\015\017\064\020\010\021\052" +
    "\022\032\023\076\024\143\025\045\026\006\027\034\032" +
    "\024\040\122\041\016\042\056\043\126\044\131\045\017" +
    "\046\106\047\054\050\012\051\023\052\133\053\140\054" +
    "\071\055\007\056\113\057\130\060\057\061\043\063\062" +
    "\064\141\065\025\067\014\073\074\074\044\075\120\076" +
    "\114\077\125\100\040\001\001\000\002\001\001\000\104" +
    "\014\073\015\030\016\015\017\064\020\010\021\052\022" +
    "\032\023\076\024\143\025\045\032\024\043\u013c\044\131" +
    "\045\017\046\106\047\054\050\012\051\023\052\133\053" +
    "\140\054\071\055\007\056\113\057\130\060\057\061\043" +
    "\063\062\064\141\073\074\074\044\076\114\077\125\100" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\132" +
    "\006\020\007\u0119\010\107\014\073\015\030\016\015\017" +
    "\064\020\010\021\052\022\032\023\076\024\143\025\045" +
    "\026\006\027\034\032\024\040\122\041\016\042\056\043" +
    "\126\044\131\045\017\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\065\025\067\014\073\074" +
    "\074\044\075\120\076\114\077\125\100\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\u010d\101\u010e\001" +
    "\001\000\002\001\001\000\144\004\u010b\005\066\006\020" +
    "\007\102\010\107\014\073\015\030\016\015\017\064\020" +
    "\010\021\052\022\032\023\076\024\046\025\045\026\006" +
    "\027\034\030\110\032\024\040\122\041\016\042\056\043" +
    "\126\044\131\045\017\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\062\127\063\062\064\141\065\025\067\014" +
    "\073\074\074\044\075\120\076\114\077\125\100\040\101" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\014\073\015\030\016\015\017\064\020\010\021" +
    "\052\022\032\023\076\024\143\025\045\032\024\052\377" +
    "\053\140\054\071\055\007\056\113\057\130\060\057\061" +
    "\043\063\062\064\141\073\074\074\044\076\114\077\125" +
    "\100\040\001\001\000\002\001\001\000\140\006\020\007" +
    "\360\010\107\014\073\015\030\016\015\017\064\020\010" +
    "\021\052\022\032\023\076\024\143\025\045\026\006\027" +
    "\034\032\024\035\357\036\356\040\122\041\016\042\056" +
    "\043\126\044\131\045\017\046\106\047\054\050\012\051" +
    "\023\052\133\053\140\054\071\055\007\056\113\057\130" +
    "\060\057\061\043\063\062\064\141\065\025\067\014\073" +
    "\074\074\044\075\120\076\114\077\125\100\040\101\361" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\132\006\020\007\336\010\107\014\073\015\030" +
    "\016\015\017\064\020\010\021\052\022\032\023\076\024" +
    "\143\025\045\026\006\027\034\032\024\040\122\041\016" +
    "\042\056\043\126\044\131\045\017\046\106\047\054\050" +
    "\012\051\023\052\133\053\140\054\071\055\007\056\113" +
    "\057\130\060\057\061\043\063\062\064\141\065\025\067" +
    "\014\073\074\074\044\075\120\076\114\077\125\100\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\006\027" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\136\006\020\007\160\010\107\014\073" +
    "\015\030\016\015\017\064\020\010\021\052\022\032\023" +
    "\076\024\143\025\045\026\006\027\034\032\024\033\213" +
    "\040\122\041\016\042\056\043\126\044\131\045\017\046" +
    "\106\047\054\050\012\051\023\052\133\053\140\054\071" +
    "\055\007\056\113\057\130\060\057\061\043\063\062\064" +
    "\141\065\025\067\014\073\074\074\044\075\120\076\114" +
    "\077\125\100\040\101\161\001\001\000\002\001\001\000" +
    "\066\014\073\015\030\016\015\017\064\020\010\021\052" +
    "\022\032\023\076\024\143\025\045\032\024\052\172\053" +
    "\140\054\071\055\007\056\113\057\130\060\057\061\043" +
    "\063\062\064\141\073\074\074\044\076\114\077\125\100" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\132\006\020\007\145\010\107\014\073\015" +
    "\030\016\015\017\064\020\010\021\052\022\032\023\076" +
    "\024\143\025\045\026\006\027\034\032\024\040\122\041" +
    "\016\042\056\043\126\044\131\045\017\046\106\047\054" +
    "\050\012\051\023\052\133\053\140\054\071\055\007\056" +
    "\113\057\130\060\057\061\043\063\062\064\141\065\025" +
    "\067\014\073\074\074\044\075\120\076\114\077\125\100" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\132\006\020\007\150\010\107\014\073\015" +
    "\030\016\015\017\064\020\010\021\052\022\032\023\076" +
    "\024\143\025\045\026\006\027\034\032\024\040\122\041" +
    "\016\042\056\043\126\044\131\045\017\046\106\047\054" +
    "\050\012\051\023\052\133\053\140\054\071\055\007\056" +
    "\113\057\130\060\057\061\043\063\062\064\141\065\025" +
    "\067\014\073\074\074\044\075\120\076\114\077\125\100" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\170\001\001\000\136\006\020\007" +
    "\160\010\107\014\073\015\030\016\015\017\064\020\010" +
    "\021\052\022\032\023\076\024\143\025\045\026\006\027" +
    "\034\032\024\033\157\040\122\041\016\042\056\043\126" +
    "\044\131\045\017\046\106\047\054\050\012\051\023\052" +
    "\133\053\140\054\071\055\007\056\113\057\130\060\057" +
    "\061\043\063\062\064\141\065\025\067\014\073\074\074" +
    "\044\075\120\076\114\077\125\100\040\101\161\001\001" +
    "\000\132\006\020\007\155\010\107\014\073\015\030\016" +
    "\015\017\064\020\010\021\052\022\032\023\076\024\143" +
    "\025\045\026\006\027\034\032\024\040\122\041\016\042" +
    "\056\043\126\044\131\045\017\046\106\047\054\050\012" +
    "\051\023\052\133\053\140\054\071\055\007\056\113\057" +
    "\130\060\057\061\043\063\062\064\141\065\025\067\014" +
    "\073\074\074\044\075\120\076\114\077\125\100\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\163\101\164\001\001\000\002\001\001\000" +
    "\132\006\020\007\165\010\107\014\073\015\030\016\015" +
    "\017\064\020\010\021\052\022\032\023\076\024\143\025" +
    "\045\026\006\027\034\032\024\040\122\041\016\042\056" +
    "\043\126\044\131\045\017\046\106\047\054\050\012\051" +
    "\023\052\133\053\140\054\071\055\007\056\113\057\130" +
    "\060\057\061\043\063\062\064\141\065\025\067\014\073" +
    "\074\074\044\075\120\076\114\077\125\100\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\166\101" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\176\013\175\101\174\001\001\000\002\001\001\000\006" +
    "\012\210\101\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\132\006\020\007\203\010\107\014\073\015\030" +
    "\016\015\017\064\020\010\021\052\022\032\023\076\024" +
    "\143\025\045\026\006\027\034\032\024\040\122\041\016" +
    "\042\056\043\126\044\131\045\017\046\106\047\054\050" +
    "\012\051\023\052\133\053\140\054\071\055\007\056\113" +
    "\057\130\060\057\061\043\063\062\064\141\065\025\067" +
    "\014\073\074\074\044\075\120\076\114\077\125\100\040" +
    "\001\001\000\132\006\020\007\202\010\107\014\073\015" +
    "\030\016\015\017\064\020\010\021\052\022\032\023\076" +
    "\024\143\025\045\026\006\027\034\032\024\040\122\041" +
    "\016\042\056\043\126\044\131\045\017\046\106\047\054" +
    "\050\012\051\023\052\133\053\140\054\071\055\007\056" +
    "\113\057\130\060\057\061\043\063\062\064\141\065\025" +
    "\067\014\073\074\074\044\075\120\076\114\077\125\100" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\132" +
    "\006\020\007\205\010\107\014\073\015\030\016\015\017" +
    "\064\020\010\021\052\022\032\023\076\024\143\025\045" +
    "\026\006\027\034\032\024\040\122\041\016\042\056\043" +
    "\126\044\131\045\017\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\065\025\067\014\073\074" +
    "\074\044\075\120\076\114\077\125\100\040\001\001\000" +
    "\002\001\001\000\004\013\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\212\101\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\132" +
    "\006\020\007\216\010\107\014\073\015\030\016\015\017" +
    "\064\020\010\021\052\022\032\023\076\024\143\025\045" +
    "\026\006\027\034\032\024\040\122\041\016\042\056\043" +
    "\126\044\131\045\017\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\065\025\067\014\073\074" +
    "\074\044\075\120\076\114\077\125\100\040\001\001\000" +
    "\002\001\001\000\132\006\020\007\220\010\107\014\073" +
    "\015\030\016\015\017\064\020\010\021\052\022\032\023" +
    "\076\024\143\025\045\026\006\027\034\032\024\040\122" +
    "\041\016\042\056\043\126\044\131\045\017\046\106\047" +
    "\054\050\012\051\023\052\133\053\140\054\071\055\007" +
    "\056\113\057\130\060\057\061\043\063\062\064\141\065" +
    "\025\067\014\073\074\074\044\075\120\076\114\077\125" +
    "\100\040\001\001\000\002\001\001\000\132\006\020\007" +
    "\222\010\107\014\073\015\030\016\015\017\064\020\010" +
    "\021\052\022\032\023\076\024\143\025\045\026\006\027" +
    "\034\032\024\040\122\041\016\042\056\043\126\044\131" +
    "\045\017\046\106\047\054\050\012\051\023\052\133\053" +
    "\140\054\071\055\007\056\113\057\130\060\057\061\043" +
    "\063\062\064\141\065\025\067\014\073\074\074\044\075" +
    "\120\076\114\077\125\100\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\014\073\015\030\016\015\017" +
    "\064\020\010\021\052\022\032\023\076\024\143\025\045" +
    "\032\024\045\241\046\106\047\054\050\012\051\023\052" +
    "\133\053\140\054\071\055\007\056\113\057\130\060\057" +
    "\061\043\063\062\064\141\073\074\074\044\076\114\077" +
    "\125\100\040\001\001\000\100\014\073\015\030\016\015" +
    "\017\064\020\010\021\052\022\032\023\076\024\143\025" +
    "\045\032\024\045\226\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\073\074\074\044\076\114" +
    "\077\125\100\040\001\001\000\002\001\001\000\076\014" +
    "\073\015\030\016\015\017\064\020\010\021\052\022\032" +
    "\023\076\024\143\025\045\032\024\046\240\047\054\050" +
    "\012\051\023\052\133\053\140\054\071\055\007\056\113" +
    "\057\130\060\057\061\043\063\062\064\141\073\074\074" +
    "\044\076\114\077\125\100\040\001\001\000\076\014\073" +
    "\015\030\016\015\017\064\020\010\021\052\022\032\023" +
    "\076\024\143\025\045\032\024\046\231\047\054\050\012" +
    "\051\023\052\133\053\140\054\071\055\007\056\113\057" +
    "\130\060\057\061\043\063\062\064\141\073\074\074\044" +
    "\076\114\077\125\100\040\001\001\000\002\001\001\000" +
    "\074\014\073\015\030\016\015\017\064\020\010\021\052" +
    "\022\032\023\076\024\143\025\045\032\024\047\237\050" +
    "\012\051\023\052\133\053\140\054\071\055\007\056\113" +
    "\057\130\060\057\061\043\063\062\064\141\073\074\074" +
    "\044\076\114\077\125\100\040\001\001\000\074\014\073" +
    "\015\030\016\015\017\064\020\010\021\052\022\032\023" +
    "\076\024\143\025\045\032\024\047\236\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\073\074\074\044\076\114" +
    "\077\125\100\040\001\001\000\074\014\073\015\030\016" +
    "\015\017\064\020\010\021\052\022\032\023\076\024\143" +
    "\025\045\032\024\047\235\050\012\051\023\052\133\053" +
    "\140\054\071\055\007\056\113\057\130\060\057\061\043" +
    "\063\062\064\141\073\074\074\044\076\114\077\125\100" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\102\014" +
    "\073\015\030\016\015\017\064\020\010\021\052\022\032" +
    "\023\076\024\143\025\045\032\024\044\255\045\017\046" +
    "\106\047\054\050\012\051\023\052\133\053\140\054\071" +
    "\055\007\056\113\057\130\060\057\061\043\063\062\064" +
    "\141\073\074\074\044\076\114\077\125\100\040\001\001" +
    "\000\102\014\073\015\030\016\015\017\064\020\010\021" +
    "\052\022\032\023\076\024\143\025\045\032\024\044\254" +
    "\045\017\046\106\047\054\050\012\051\023\052\133\053" +
    "\140\054\071\055\007\056\113\057\130\060\057\061\043" +
    "\063\062\064\141\073\074\074\044\076\114\077\125\100" +
    "\040\001\001\000\102\014\073\015\030\016\015\017\064" +
    "\020\010\021\052\022\032\023\076\024\143\025\045\032" +
    "\024\044\253\045\017\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\073\074\074\044\076\114" +
    "\077\125\100\040\001\001\000\102\014\073\015\030\016" +
    "\015\017\064\020\010\021\052\022\032\023\076\024\143" +
    "\025\045\032\024\044\252\045\017\046\106\047\054\050" +
    "\012\051\023\052\133\053\140\054\071\055\007\056\113" +
    "\057\130\060\057\061\043\063\062\064\141\073\074\074" +
    "\044\076\114\077\125\100\040\001\001\000\102\014\073" +
    "\015\030\016\015\017\064\020\010\021\052\022\032\023" +
    "\076\024\143\025\045\032\024\044\251\045\017\046\106" +
    "\047\054\050\012\051\023\052\133\053\140\054\071\055" +
    "\007\056\113\057\130\060\057\061\043\063\062\064\141" +
    "\073\074\074\044\076\114\077\125\100\040\001\001\000" +
    "\102\014\073\015\030\016\015\017\064\020\010\021\052" +
    "\022\032\023\076\024\143\025\045\032\024\044\250\045" +
    "\017\046\106\047\054\050\012\051\023\052\133\053\140" +
    "\054\071\055\007\056\113\057\130\060\057\061\043\063" +
    "\062\064\141\073\074\074\044\076\114\077\125\100\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\132\006\020\007\257\010\107\014\073\015\030\016" +
    "\015\017\064\020\010\021\052\022\032\023\076\024\143" +
    "\025\045\026\006\027\034\032\024\040\122\041\016\042" +
    "\056\043\126\044\131\045\017\046\106\047\054\050\012" +
    "\051\023\052\133\053\140\054\071\055\007\056\113\057" +
    "\130\060\057\061\043\063\062\064\141\065\025\067\014" +
    "\073\074\074\044\075\120\076\114\077\125\100\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\132\006\020" +
    "\007\262\010\107\014\073\015\030\016\015\017\064\020" +
    "\010\021\052\022\032\023\076\024\143\025\045\026\006" +
    "\027\034\032\024\040\122\041\016\042\056\043\126\044" +
    "\131\045\017\046\106\047\054\050\012\051\023\052\133" +
    "\053\140\054\071\055\007\056\113\057\130\060\057\061" +
    "\043\063\062\064\141\065\025\067\014\073\074\074\044" +
    "\075\120\076\114\077\125\100\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\110\014\073\015\030\016\015" +
    "\017\064\020\010\021\052\022\032\023\076\024\143\025" +
    "\045\032\024\041\265\042\056\043\126\044\131\045\017" +
    "\046\106\047\054\050\012\051\023\052\133\053\140\054" +
    "\071\055\007\056\113\057\130\060\057\061\043\063\062" +
    "\064\141\073\074\074\044\076\114\077\125\100\040\001" +
    "\001\000\002\001\001\000\106\014\073\015\030\016\015" +
    "\017\064\020\010\021\052\022\032\023\076\024\143\025" +
    "\045\032\024\042\267\043\126\044\131\045\017\046\106" +
    "\047\054\050\012\051\023\052\133\053\140\054\071\055" +
    "\007\056\113\057\130\060\057\061\043\063\062\064\141" +
    "\073\074\074\044\076\114\077\125\100\040\001\001\000" +
    "\002\001\001\000\140\006\020\007\274\010\107\014\073" +
    "\015\030\016\015\017\064\020\010\021\052\022\032\023" +
    "\076\024\143\025\045\026\006\027\034\032\024\040\122" +
    "\041\016\042\056\043\126\044\131\045\017\046\106\047" +
    "\054\050\012\051\023\052\133\053\140\054\071\055\007" +
    "\056\113\057\130\060\057\061\043\063\062\064\141\065" +
    "\025\067\014\070\272\071\271\073\074\074\044\075\120" +
    "\076\114\077\125\100\040\101\275\001\001\000\002\001" +
    "\001\000\006\072\304\101\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\132\006\020\007" +
    "\277\010\107\014\073\015\030\016\015\017\064\020\010" +
    "\021\052\022\032\023\076\024\143\025\045\026\006\027" +
    "\034\032\024\040\122\041\016\042\056\043\126\044\131" +
    "\045\017\046\106\047\054\050\012\051\023\052\133\053" +
    "\140\054\071\055\007\056\113\057\130\060\057\061\043" +
    "\063\062\064\141\065\025\067\014\073\074\074\044\075" +
    "\120\076\114\077\125\100\040\001\001\000\002\001\001" +
    "\000\132\006\020\007\301\010\107\014\073\015\030\016" +
    "\015\017\064\020\010\021\052\022\032\023\076\024\143" +
    "\025\045\026\006\027\034\032\024\040\122\041\016\042" +
    "\056\043\126\044\131\045\017\046\106\047\054\050\012" +
    "\051\023\052\133\053\140\054\071\055\007\056\113\057" +
    "\130\060\057\061\043\063\062\064\141\065\025\067\014" +
    "\073\074\074\044\075\120\076\114\077\125\100\040\001" +
    "\001\000\002\001\001\000\134\006\020\007\274\010\107" +
    "\014\073\015\030\016\015\017\064\020\010\021\052\022" +
    "\032\023\076\024\143\025\045\026\006\027\034\032\024" +
    "\040\122\041\016\042\056\043\126\044\131\045\017\046" +
    "\106\047\054\050\012\051\023\052\133\053\140\054\071" +
    "\055\007\056\113\057\130\060\057\061\043\063\062\064" +
    "\141\065\025\067\014\070\305\073\074\074\044\075\120" +
    "\076\114\077\125\100\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\072\306\101\303\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\132\006\020\007\316\010\107\014\073\015\030\016" +
    "\015\017\064\020\010\021\052\022\032\023\076\024\143" +
    "\025\045\026\006\027\034\032\024\040\122\041\016\042" +
    "\056\043\126\044\131\045\017\046\106\047\054\050\012" +
    "\051\023\052\133\053\140\054\071\055\007\056\113\057" +
    "\130\060\057\061\043\063\062\064\141\065\025\067\014" +
    "\073\074\074\044\075\120\076\114\077\125\100\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\132\006\020\007" +
    "\324\010\107\014\073\015\030\016\015\017\064\020\010" +
    "\021\052\022\032\023\076\024\143\025\045\026\006\027" +
    "\034\032\024\040\122\041\016\042\056\043\126\044\131" +
    "\045\017\046\106\047\054\050\012\051\023\052\133\053" +
    "\140\054\071\055\007\056\113\057\130\060\057\061\043" +
    "\063\062\064\141\065\025\067\014\073\074\074\044\075" +
    "\120\076\114\077\125\100\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\132\006\020\007\327\010\107\014" +
    "\073\015\030\016\015\017\064\020\010\021\052\022\032" +
    "\023\076\024\143\025\045\026\006\027\034\032\024\040" +
    "\122\041\016\042\056\043\126\044\131\045\017\046\106" +
    "\047\054\050\012\051\023\052\133\053\140\054\071\055" +
    "\007\056\113\057\130\060\057\061\043\063\062\064\141" +
    "\065\025\067\014\073\074\074\044\075\120\076\114\077" +
    "\125\100\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\132\006\020\007\332\010\107\014\073\015\030\016" +
    "\015\017\064\020\010\021\052\022\032\023\076\024\143" +
    "\025\045\026\006\027\034\032\024\040\122\041\016\042" +
    "\056\043\126\044\131\045\017\046\106\047\054\050\012" +
    "\051\023\052\133\053\140\054\071\055\007\056\113\057" +
    "\130\060\057\061\043\063\062\064\141\065\025\067\014" +
    "\073\074\074\044\075\120\076\114\077\125\100\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\136\006\020" +
    "\007\160\010\107\014\073\015\030\016\015\017\064\020" +
    "\010\021\052\022\032\023\076\024\143\025\045\026\006" +
    "\027\034\032\024\033\335\040\122\041\016\042\056\043" +
    "\126\044\131\045\017\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\065\025\067\014\073\074" +
    "\074\044\075\120\076\114\077\125\100\040\101\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\132\006\020" +
    "\007\340\010\107\014\073\015\030\016\015\017\064\020" +
    "\010\021\052\022\032\023\076\024\143\025\045\026\006" +
    "\027\034\032\024\040\122\041\016\042\056\043\126\044" +
    "\131\045\017\046\106\047\054\050\012\051\023\052\133" +
    "\053\140\054\071\055\007\056\113\057\130\060\057\061" +
    "\043\063\062\064\141\065\025\067\014\073\074\074\044" +
    "\075\120\076\114\077\125\100\040\001\001\000\006\066" +
    "\343\101\342\001\001\000\132\006\020\007\344\010\107" +
    "\014\073\015\030\016\015\017\064\020\010\021\052\022" +
    "\032\023\076\024\143\025\045\026\006\027\034\032\024" +
    "\040\122\041\016\042\056\043\126\044\131\045\017\046" +
    "\106\047\054\050\012\051\023\052\133\053\140\054\071" +
    "\055\007\056\113\057\130\060\057\061\043\063\062\064" +
    "\141\065\025\067\014\073\074\074\044\075\120\076\114" +
    "\077\125\100\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\136\006\020\007\160\010\107" +
    "\014\073\015\030\016\015\017\064\020\010\021\052\022" +
    "\032\023\076\024\143\025\045\026\006\027\034\032\024" +
    "\033\346\040\122\041\016\042\056\043\126\044\131\045" +
    "\017\046\106\047\054\050\012\051\023\052\133\053\140" +
    "\054\071\055\007\056\113\057\130\060\057\061\043\063" +
    "\062\064\141\065\025\067\014\073\074\074\044\075\120" +
    "\076\114\077\125\100\040\101\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\132\006\020\007\351\010\107" +
    "\014\073\015\030\016\015\017\064\020\010\021\052\022" +
    "\032\023\076\024\143\025\045\026\006\027\034\032\024" +
    "\040\122\041\016\042\056\043\126\044\131\045\017\046" +
    "\106\047\054\050\012\051\023\052\133\053\140\054\071" +
    "\055\007\056\113\057\130\060\057\061\043\063\062\064" +
    "\141\065\025\067\014\073\074\074\044\075\120\076\114" +
    "\077\125\100\040\001\001\000\002\001\001\000\132\006" +
    "\020\007\353\010\107\014\073\015\030\016\015\017\064" +
    "\020\010\021\052\022\032\023\076\024\143\025\045\026" +
    "\006\027\034\032\024\040\122\041\016\042\056\043\126" +
    "\044\131\045\017\046\106\047\054\050\012\051\023\052" +
    "\133\053\140\054\071\055\007\056\113\057\130\060\057" +
    "\061\043\063\062\064\141\065\025\067\014\073\074\074" +
    "\044\075\120\076\114\077\125\100\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\365\101\366\001\001\000\002\001\001" +
    "\000\002\001\001\000\132\006\020\007\363\010\107\014" +
    "\073\015\030\016\015\017\064\020\010\021\052\022\032" +
    "\023\076\024\143\025\045\026\006\027\034\032\024\040" +
    "\122\041\016\042\056\043\126\044\131\045\017\046\106" +
    "\047\054\050\012\051\023\052\133\053\140\054\071\055" +
    "\007\056\113\057\130\060\057\061\043\063\062\064\141" +
    "\065\025\067\014\073\074\074\044\075\120\076\114\077" +
    "\125\100\040\001\001\000\002\001\001\000\134\006\020" +
    "\007\360\010\107\014\073\015\030\016\015\017\064\020" +
    "\010\021\052\022\032\023\076\024\143\025\045\026\006" +
    "\027\034\032\024\035\367\040\122\041\016\042\056\043" +
    "\126\044\131\045\017\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\065\025\067\014\073\074" +
    "\074\044\075\120\076\114\077\125\100\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\370\101\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\006\027\373\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\132\006\020\007\u0102\010\107\014\073" +
    "\015\030\016\015\017\064\020\010\021\052\022\032\023" +
    "\076\024\143\025\045\026\006\027\034\032\024\040\122" +
    "\041\016\042\056\043\126\044\131\045\017\046\106\047" +
    "\054\050\012\051\023\052\133\053\140\054\071\055\007" +
    "\056\113\057\130\060\057\061\043\063\062\064\141\065" +
    "\025\067\014\073\074\074\044\075\120\076\114\077\125" +
    "\100\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\132\006\020\007\u0105\010\107\014\073\015\030\016\015" +
    "\017\064\020\010\021\052\022\032\023\076\024\143\025" +
    "\045\026\006\027\034\032\024\040\122\041\016\042\056" +
    "\043\126\044\131\045\017\046\106\047\054\050\012\051" +
    "\023\052\133\053\140\054\071\055\007\056\113\057\130" +
    "\060\057\061\043\063\062\064\141\065\025\067\014\073" +
    "\074\074\044\075\120\076\114\077\125\100\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\132\006\020\007" +
    "\u0108\010\107\014\073\015\030\016\015\017\064\020\010" +
    "\021\052\022\032\023\076\024\143\025\045\026\006\027" +
    "\034\032\024\040\122\041\016\042\056\043\126\044\131" +
    "\045\017\046\106\047\054\050\012\051\023\052\133\053" +
    "\140\054\071\055\007\056\113\057\130\060\057\061\043" +
    "\063\062\064\141\065\025\067\014\073\074\074\044\075" +
    "\120\076\114\077\125\100\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\u0110\101\u010e\001\001\000\002\001\001\000\132\006" +
    "\020\007\u0112\010\107\014\073\015\030\016\015\017\064" +
    "\020\010\021\052\022\032\023\076\024\143\025\045\026" +
    "\006\027\034\032\024\040\122\041\016\042\056\043\126" +
    "\044\131\045\017\046\106\047\054\050\012\051\023\052" +
    "\133\053\140\054\071\055\007\056\113\057\130\060\057" +
    "\061\043\063\062\064\141\065\025\067\014\073\074\074" +
    "\044\075\120\076\114\077\125\100\040\001\001\000\002" +
    "\001\001\000\132\006\020\007\u0114\010\107\014\073\015" +
    "\030\016\015\017\064\020\010\021\052\022\032\023\076" +
    "\024\143\025\045\026\006\027\034\032\024\040\122\041" +
    "\016\042\056\043\126\044\131\045\017\046\106\047\054" +
    "\050\012\051\023\052\133\053\140\054\071\055\007\056" +
    "\113\057\130\060\057\061\043\063\062\064\141\065\025" +
    "\067\014\073\074\074\044\075\120\076\114\077\125\100" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\132" +
    "\006\020\007\u0117\010\107\014\073\015\030\016\015\017" +
    "\064\020\010\021\052\022\032\023\076\024\143\025\045" +
    "\026\006\027\034\032\024\040\122\041\016\042\056\043" +
    "\126\044\131\045\017\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\065\025\067\014\073\074" +
    "\074\044\075\120\076\114\077\125\100\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\132\006" +
    "\020\007\u011e\010\107\014\073\015\030\016\015\017\064" +
    "\020\010\021\052\022\032\023\076\024\143\025\045\026" +
    "\006\027\034\032\024\040\122\041\016\042\056\043\126" +
    "\044\131\045\017\046\106\047\054\050\012\051\023\052" +
    "\133\053\140\054\071\055\007\056\113\057\130\060\057" +
    "\061\043\063\062\064\141\065\025\067\014\073\074\074" +
    "\044\075\120\076\114\077\125\100\040\001\001\000\002" +
    "\001\001\000\132\006\020\007\u0120\010\107\014\073\015" +
    "\030\016\015\017\064\020\010\021\052\022\032\023\076" +
    "\024\143\025\045\026\006\027\034\032\024\040\122\041" +
    "\016\042\056\043\126\044\131\045\017\046\106\047\054" +
    "\050\012\051\023\052\133\053\140\054\071\055\007\056" +
    "\113\057\130\060\057\061\043\063\062\064\141\065\025" +
    "\067\014\073\074\074\044\075\120\076\114\077\125\100" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\132" +
    "\006\020\007\u0123\010\107\014\073\015\030\016\015\017" +
    "\064\020\010\021\052\022\032\023\076\024\143\025\045" +
    "\026\006\027\034\032\024\040\122\041\016\042\056\043" +
    "\126\044\131\045\017\046\106\047\054\050\012\051\023" +
    "\052\133\053\140\054\071\055\007\056\113\057\130\060" +
    "\057\061\043\063\062\064\141\065\025\067\014\073\074" +
    "\074\044\075\120\076\114\077\125\100\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\132\006\020\007\u0126" +
    "\010\107\014\073\015\030\016\015\017\064\020\010\021" +
    "\052\022\032\023\076\024\143\025\045\026\006\027\034" +
    "\032\024\040\122\041\016\042\056\043\126\044\131\045" +
    "\017\046\106\047\054\050\012\051\023\052\133\053\140" +
    "\054\071\055\007\056\113\057\130\060\057\061\043\063" +
    "\062\064\141\065\025\067\014\073\074\074\044\075\120" +
    "\076\114\077\125\100\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\132\006\020\007\u0129\010\107\014\073" +
    "\015\030\016\015\017\064\020\010\021\052\022\032\023" +
    "\076\024\143\025\045\026\006\027\034\032\024\040\122" +
    "\041\016\042\056\043\126\044\131\045\017\046\106\047" +
    "\054\050\012\051\023\052\133\053\140\054\071\055\007" +
    "\056\113\057\130\060\057\061\043\063\062\064\141\065" +
    "\025\067\014\073\074\074\044\075\120\076\114\077\125" +
    "\100\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\132\006\020\007\u012c\010\107\014\073\015\030\016\015" +
    "\017\064\020\010\021\052\022\032\023\076\024\143\025" +
    "\045\026\006\027\034\032\024\040\122\041\016\042\056" +
    "\043\126\044\131\045\017\046\106\047\054\050\012\051" +
    "\023\052\133\053\140\054\071\055\007\056\113\057\130" +
    "\060\057\061\043\063\062\064\141\065\025\067\014\073" +
    "\074\074\044\075\120\076\114\077\125\100\040\001\001" +
    "\000\002\001\001\000\006\030\u012f\101\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\u010d\101\u010e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\144\004\u0138\005\066\006\020\007\102\010\107\014" +
    "\073\015\030\016\015\017\064\020\010\021\052\022\032" +
    "\023\076\024\046\025\045\026\006\027\034\030\110\032" +
    "\024\040\122\041\016\042\056\043\126\044\131\045\017" +
    "\046\106\047\054\050\012\051\023\052\133\053\140\054" +
    "\071\055\007\056\113\057\130\060\057\061\043\062\127" +
    "\063\062\064\141\065\025\067\014\073\074\074\044\075" +
    "\120\076\114\077\125\100\040\101\111\001\001\000\002" +
    "\001\001\000\132\006\020\007\u013a\010\107\014\073\015" +
    "\030\016\015\017\064\020\010\021\052\022\032\023\076" +
    "\024\143\025\045\026\006\027\034\032\024\040\122\041" +
    "\016\042\056\043\126\044\131\045\017\046\106\047\054" +
    "\050\012\051\023\052\133\053\140\054\071\055\007\056" +
    "\113\057\130\060\057\061\043\063\062\064\141\065\025" +
    "\067\014\073\074\074\044\075\120\076\114\077\125\100" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\136\006" +
    "\020\007\160\010\107\014\073\015\030\016\015\017\064" +
    "\020\010\021\052\022\032\023\076\024\143\025\045\026" +
    "\006\027\034\032\024\033\u0140\040\122\041\016\042\056" +
    "\043\126\044\131\045\017\046\106\047\054\050\012\051" +
    "\023\052\133\053\140\054\071\055\007\056\113\057\130" +
    "\060\057\061\043\063\062\064\141\065\025\067\014\073" +
    "\074\074\044\075\120\076\114\077\125\100\040\101\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u0143\001\001\000\002\001\001\000\002\001\001\000\144" +
    "\004\u010b\005\066\006\020\007\102\010\107\014\073\015" +
    "\030\016\015\017\064\020\010\021\052\022\032\023\076" +
    "\024\046\025\045\026\006\027\034\030\110\032\024\040" +
    "\122\041\016\042\056\043\126\044\131\045\017\046\106" +
    "\047\054\050\012\051\023\052\133\053\140\054\071\055" +
    "\007\056\113\057\130\060\057\061\043\062\127\063\062" +
    "\064\141\065\025\067\014\073\074\074\044\075\120\076" +
    "\114\077\125\100\040\101\111\001\001\000\002\001\001" +
    "\000\132\006\020\007\u0148\010\107\014\073\015\030\016" +
    "\015\017\064\020\010\021\052\022\032\023\076\024\143" +
    "\025\045\026\006\027\034\032\024\040\122\041\016\042" +
    "\056\043\126\044\131\045\017\046\106\047\054\050\012" +
    "\051\023\052\133\053\140\054\071\055\007\056\113\057" +
    "\130\060\057\061\043\063\062\064\141\065\025\067\014" +
    "\073\074\074\044\075\120\076\114\077\125\100\040\001" +
    "\001\000\002\001\001\000\132\006\020\007\u014a\010\107" +
    "\014\073\015\030\016\015\017\064\020\010\021\052\022" +
    "\032\023\076\024\143\025\045\026\006\027\034\032\024" +
    "\040\122\041\016\042\056\043\126\044\131\045\017\046" +
    "\106\047\054\050\012\051\023\052\133\053\140\054\071" +
    "\055\007\056\113\057\130\060\057\061\043\063\062\064" +
    "\141\065\025\067\014\073\074\074\044\075\120\076\114" +
    "\077\125\100\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\132\006\020\007\u014d\010\107\014\073\015\030" +
    "\016\015\017\064\020\010\021\052\022\032\023\076\024" +
    "\143\025\045\026\006\027\034\032\024\040\122\041\016" +
    "\042\056\043\126\044\131\045\017\046\106\047\054\050" +
    "\012\051\023\052\133\053\140\054\071\055\007\056\113" +
    "\057\130\060\057\061\043\063\062\064\141\065\025\067" +
    "\014\073\074\074\044\075\120\076\114\077\125\100\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\014\073\015\030\016\015" +
    "\017\064\020\010\021\052\022\032\023\076\024\143\025" +
    "\045\032\024\051\u0152\052\133\053\140\054\071\055\007" +
    "\056\113\057\130\060\057\061\043\063\062\064\141\073" +
    "\074\074\044\076\114\077\125\100\040\001\001\000\002" +
    "\001\001\000\136\006\020\007\u0156\010\107\014\073\015" +
    "\030\016\015\017\064\020\010\021\052\022\032\023\076" +
    "\024\143\025\045\026\006\027\034\032\024\033\u0155\040" +
    "\122\041\016\042\056\043\126\044\131\045\017\046\106" +
    "\047\054\050\012\051\023\052\133\053\140\054\071\055" +
    "\007\056\113\057\130\060\057\061\043\063\062\064\141" +
    "\065\025\067\014\073\074\074\044\075\120\076\114\077" +
    "\125\100\040\101\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\163\101\164\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //  This is no longer needed for CUP v0.11
		// Create a lexer that reads from
		// supplied input stream or standard input
		// if (in == null)
		//    in = System.in;
		// lexer = new Lexer(in);
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    String msg = "Line " + lexer.getLine() + ", pos " +
		    	lexer.getColumn() +
		    	": Unrecognised token <" +
		    	lexer.getText() + ">";
		    throw new SyntaxSmplException(msg, ioe);
		}
	  
    }


		SmplLexer lexer;

		public SmplParser(SmplLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " + 
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",63, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // limit ::= LIMIT VARIABLE AS LPAREN VARIABLE APPROACHES expression RPAREN 
            {
              Exp RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpLimit(func, x, e);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("limit",62, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // limit ::= LIMIT procExp AS LPAREN VARIABLE APPROACHES expression RPAREN 
            {
              Exp RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).right;
		ExpProcedure func = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpLimit(func, x, e);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("limit",62, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // plot ::= PLOT expression FOR VARIABLE IN LBRACKET expression COLON expression RBRACKET 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-8)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp end = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		

		RESULT = new ExpPlot(e,v,start,end);

		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("plot",61, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-9)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // differentiate ::= DIFFERENTIATE LPAREN VARIABLE RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		

					RESULT = new ExpDifferentiate(v);
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("differentiate",60, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // differentiate ::= DIFFERENTIATE LPAREN procExp RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ExpProcedure p = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
					
					RESULT = new ExpDifferentiate(p);
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("differentiate",60, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // trigFunctions ::= COT LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				  	RESULT = new ExpCot(e);
				 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("trigFunctions",58, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // trigFunctions ::= COSEC LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				  	RESULT = new ExpCosec(e);
				 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("trigFunctions",58, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // trigFunctions ::= SEC LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				  	RESULT = new ExpSec(e);
				 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("trigFunctions",58, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // trigFunctions ::= TAN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				  	RESULT = new ExpTan(e);
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("trigFunctions",58, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // trigFunctions ::= COS LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				  	RESULT = new ExpCos(e); 
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("trigFunctions",58, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // trigFunctions ::= SIN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
					RESULT = new ExpSin(e);
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("trigFunctions",58, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // casesAux ::= empty 
            {
              ArrayList<ExpPair> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("casesAux",56, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // casesAux ::= COMMA _case casesAux 
            {
              ArrayList<ExpPair> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ExpPair c = (ExpPair)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<ExpPair> ca = (ArrayList<ExpPair>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			ca.add(0,c);
			RESULT = ca;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("casesAux",56, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cases ::= empty 
            {
              ArrayList<ExpPair> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cases",55, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cases ::= _case casesAux 
            {
              ArrayList<ExpPair> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ExpPair c = (ExpPair)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<ExpPair> ca = (ArrayList<ExpPair>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			ca.add(0,c);
			RESULT = ca;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cases",55, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // _case ::= ELSE COLON expression 
            {
              ExpPair RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpPair(new ExpLit(SmplValue.makeStrEscaped("else")),r); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("_case",54, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // _case ::= expression COLON expression 
            {
              ExpPair RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpPair(c,r);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("_case",54, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expCase ::= CASE LBRACE cases RBRACE 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<ExpPair> c = (ArrayList<ExpPair>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new ExpCase(c);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expCase",53, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expElse ::= empty 
            {
              Exp RESULT =null;
		
		RESULT = null;
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expElse",52, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expElse ::= ELSE expression 
            {
              Exp RESULT =null;
		int elseArgleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseArgright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp elseArg = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = elseArg;
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expElse",52, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expIf ::= IF expression THEN expression expElse 
            {
              Exp RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp con = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int ifArgleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int ifArgright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp ifArg = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int elseArgleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseArgright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp elseArg = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpIf(con, ifArg, elseArg);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expIf",51, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // readint ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		
		RESULT = new ExpReadInt();
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("readint",50, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // read ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		
		RESULT = new ExpRead();
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("read",49, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // concatList ::= VARIABLE LSTCONCAT list 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp second = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",57, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // concatList ::= list LSTCONCAT VARIABLE 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp first = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",57, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // concatList ::= VARIABLE LSTCONCAT VARIABLE 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String first = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String second = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",57, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // concatList ::= list LSTCONCAT list 
            {
              Exp RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp first = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp second = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpConcatLst(first,second);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("concatList",57, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lazy ::= LAZY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpLazy(e);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("lazy",47, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // call ::= CALL LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCall(p);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("call",46, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCall(p,l);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("call",46, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // def ::= DEF VARIABLE stmt 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new ExpDef(v,e); 
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("def",48, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // equal ::= EQUAL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpEqual(a,b);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("equal",45, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // eqv ::= EQV LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		RESULT = new ExpEqv(a,b);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("eqv",44, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // size ::= SIZE LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpSize(e);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("size",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // vectorRef ::= VARIABLE LBRACKET expression RBRACKET 
            {
              ExpVectorRef RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpVectorRef(v,n);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vectorRef",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // vargsAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vargsAux",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // vargsAux ::= COMMA subvector vargsAux 
            {
              ArrayList<Exp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> vl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			vl.add(0,s);
			RESULT = vl;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vargsAux",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // vargs ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vargs",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // vargs ::= subvector vargsAux 
            {
              ArrayList<Exp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> vl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			vl.add(0,s);
			RESULT = vl;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vargs",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // subvector ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 
				RESULT = e; 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // subvector ::= expression COLON expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpSubVector(e1,e2);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // vector ::= LVEC vargs RVEC 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> v = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpVector(v);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("vector",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // list ::= EMPTYLIST 
            {
              Exp RESULT =null;
		 RESULT = new ExpList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // list ::= LBRACKET args RBRACKET 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpList(a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // list ::= LIST LPAREN args RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpList(a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("list",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // argsAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsAux",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // argsAux ::= COMMA expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			al.add(0,e);
			RESULT = al;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsAux",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // args ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("args",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // args ::= expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			al.add(0,e);
			RESULT = al;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("args",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpSubStr(e1, e2, e3);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("substr",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cdr ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCdr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("cdr",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // car ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpCar(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("car",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // pairCheck ::= PAIRCHECK LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPairCheck(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pairCheck",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
			RESULT = new ExpPair(e1, e2); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("pair",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // builtIn ::= limit 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // builtIn ::= plot 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // builtIn ::= differentiate 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // builtIn ::= trigFunctions 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // builtIn ::= readint 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // builtIn ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // builtIn ::= concatList 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // builtIn ::= lazy 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // builtIn ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // builtIn ::= equal 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // builtIn ::= eqv 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // builtIn ::= substr 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // builtIn ::= size 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // builtIn ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // builtIn ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // builtIn ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // builtIn ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // builtIn ::= pairCheck 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp pc = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		RESULT = pc; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // builtIn ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("builtIn",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolVal ::= BOOL 
            {
              SmplValue< ? > RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		boolean blit = (boolean)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(blit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("boolVal",42, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // strVal ::= CHARACTER 
            {
              SmplValue< ? > RESULT =null;
		int chlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int chlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String chlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeChar(chlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",43, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // strVal ::= STRING 
            {
              SmplValue< ? > RESULT =null;
		int strlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int strlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String strlit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.makeStrEscaped(strlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("strVal",43, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // val ::= REAL 
            {
              SmplValue< ? > RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(rlit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",41, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // val ::= INTEGER 
            {
              SmplValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = SmplValue.make(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("val",41, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= procCallExp 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpProcedureCall pc = (ExpProcedureCall)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = pc; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= vectorRef 
            {
              Exp RESULT =null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpVectorRef vr = (ExpVectorRef)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = vr; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= builtIn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= strVal 
            {
              Exp RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > sv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(sv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= boolVal 
            {
              Exp RESULT =null;
		int bvleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > bv = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(bv); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= val 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		SmplValue< ? > n = (SmplValue< ? >)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // posneg ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT  = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // posneg ::= MINUS factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(-1), f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // posneg ::= NEG factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(-1), f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("posneg",39, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // power ::= posneg 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // power ::= power POW posneg 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpPow(p, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("power",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bitnot ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitnot",37, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bitnot ::= BNOT power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ExpBitWiseNot(p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitnot",37, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= bitnot 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= term MOD bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMod(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= term DIV bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpDiv(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= term MUL bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new ExpMul(t, b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // count ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // count ::= count MINUS term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpSub(c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // count ::= count PLUS term 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpAdd(c, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("count",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bitandor ::= count 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bitandor ::= bitandor BOR count 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpBitWiseOr(ao, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bitandor ::= bitandor BAND count 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpBitWiseAnd(ao, c); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitandor",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relation ::= bitandor 
            {
              Exp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ao; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relation ::= relation NEQ bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpNeq(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relation ::= relation GE bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpGe(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relation ::= relation LE bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLe(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relation ::= relation LT bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLt(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relation ::= relation GT bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpGt(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relation ::= relation EQ bitandor 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp ao = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpEq(r, ao); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relation",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logicNot ::= relation 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNot",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logicNot ::= LNOT relation 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicNot(r); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNot",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logicAnd ::= logicNot 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAnd",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logicAnd ::= logicAnd LAND logicNot 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicAnd(a, n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAnd",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithExp ::= logicAnd 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithExp ::= arithExp LOR logicAnd 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpLogicOr(e, a); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procCallExp ::= VARIABLE LPAREN args RPAREN 
            {
              ExpProcedureCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new ExpProcedureCall(v, a);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procCallExp",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procCallExp ::= LPAREN expression RPAREN LPAREN args RPAREN 
            {
              ExpProcedureCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new ExpProcedureCall(e, a);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procCallExp",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramsAux ::= empty 
            {
              ArrayList<String> RESULT =null;
		
				RESULT = new ArrayList();
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramsAux",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramsAux ::= COMMA VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				pl.add(0,v);
				RESULT = pl;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramsAux",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= empty 
            {
              ArrayList<String> RESULT =null;
		
			RESULT = new ArrayList();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			pl.add(0,v);
			RESULT = pl;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procExp ::= procHead LPAREN args RPAREN 
            {
              ExpProcedure RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		AbstractMap.Entry<String,ArrayList<String>> h = (AbstractMap.Entry<String,ArrayList<String>>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new ExpProcedure(h.getValue(), a, h.getKey());
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procExp ::= procHead expression 
            {
              ExpProcedure RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		AbstractMap.Entry<String,ArrayList<String>> h = (AbstractMap.Entry<String,ArrayList<String>>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new ExpProcedure(h.getValue(), body, h.getKey());
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procHead ::= PROC VARIABLE 
            {
              AbstractMap.Entry<String,ArrayList<String>> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new AbstractMap.SimpleEntry(v,null);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procHead",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procHead ::= PROC LPAREN params PERIOD VARIABLE RPAREN 
            {
              AbstractMap.Entry<String,ArrayList<String>> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		ArrayList<String> ps = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new AbstractMap.SimpleEntry(v,ps);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procHead",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procHead ::= PROC LPAREN params RPAREN 
            {
              AbstractMap.Entry<String,ArrayList<String>> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<String> ps = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new AbstractMap.SimpleEntry(null,ps);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procHead",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				bl.add(0,b);
				RESULT = bl;
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				bl.add(0,b);
				RESULT = bl;
				
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binding ::= VARIABLE BE expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new Binding(v, e);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binding ::= VARIABLE EQ expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new Binding(v, e);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // letStmt ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtLet(bs, body);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("letStmt",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= quadraticExp 
            {
              Exp RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp q = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = q; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = body; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= procExp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ExpProcedure p = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expIf 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= print 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtPrint p = (StmtPrint)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= letStmt 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= expCase 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // print ::= PRINTLN LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new StmtPrint(e, '\n'); 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // print ::= PRINT LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
				RESULT = new StmtPrint(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= vectorRef ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ExpVectorRef v = (ExpVectorRef)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtDefinition(v,e);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= params ASSIGN args 
            {
              StmtDefinition RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtDefinition(p, a); 
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= def 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition SEMI 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				RESULT = new StmtSequence(s);
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
				lst.add(s);
				RESULT = lst;
			
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

