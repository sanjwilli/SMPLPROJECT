/* The following code was generated by JFlex 1.4.3 on 12/28/17 7:35 PM */

/* Specification for ECOLI tokens */

// user customisations
package smpl.lang;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/28/17 7:35 PM from the specification file
 * <tt>SMPLLexer</tt>
 */
public class SMPLLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\2\1\6\1\0\1\2\1\1\22\0\1\2\1\53"+
    "\1\103\1\10\1\0\1\75\1\76\1\0\1\21\1\22\1\7\1\73"+
    "\1\16\1\74\1\15\1\5\1\102\1\12\10\3\1\20\1\17\1\51"+
    "\1\52\1\51\1\25\1\101\1\57\1\27\1\56\1\14\1\30\1\36"+
    "\1\4\1\43\1\35\2\4\1\47\1\4\1\44\1\72\1\70\1\4"+
    "\1\71\1\50\1\42\4\4\1\63\1\62\1\23\1\0\1\24\1\0"+
    "\1\4\1\0\1\55\1\11\1\54\1\64\1\26\1\34\1\4\1\40"+
    "\1\33\2\4\1\45\1\4\1\41\1\67\1\65\1\4\1\66\1\46"+
    "\1\37\3\4\1\13\1\61\1\60\1\31\1\77\1\32\1\100\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\2\2\6\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\3\6\1\22\1\23\10\6"+
    "\2\24\1\2\13\6\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\5\1\34\1\1\1\35\5\0\1\36"+
    "\1\37\1\40\1\41\1\6\1\42\1\43\2\6\1\44"+
    "\17\6\1\45\2\6\1\5\1\0\1\5\1\46\2\47"+
    "\1\0\2\50\1\51\3\6\1\52\1\6\1\53\4\6"+
    "\1\54\10\6\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\6\1\63\1\64\1\6\1\64\1\65\1\6\1\65"+
    "\5\6\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\210\0\210\0\314\0\u0110\0\u0154"+
    "\0\210\0\u0198\0\u01dc\0\u0220\0\u0264\0\210\0\210\0\u02a8"+
    "\0\210\0\210\0\210\0\210\0\210\0\u02ec\0\u0330\0\u0374"+
    "\0\210\0\210\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c"+
    "\0\u0550\0\u0594\0\u05d8\0\210\0\u05d8\0\u061c\0\u0660\0\u06a4"+
    "\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\u0908\0\210\0\210\0\210\0\210\0\210\0\u094c"+
    "\0\210\0\u0990\0\210\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4"+
    "\0\210\0\210\0\210\0\u0110\0\u0b28\0\u0264\0\210\0\u0b6c"+
    "\0\u0bb0\0\u0110\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u0110\0\u0ff0\0\u1034\0\u1078\0\u0264\0\u10bc\0\u09d4"+
    "\0\u0a18\0\210\0\u1100\0\u0aa0\0\u0ae4\0\u0110\0\u1144\0\u1188"+
    "\0\u11cc\0\u0110\0\u1210\0\u0110\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u0110\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u0a5c\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u1584"+
    "\0\u0110\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u0110\0\u0110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\4\1\11"+
    "\1\12\1\13\1\6\1\7\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\7\1\34\1\7\1\35"+
    "\1\7\1\36\1\37\1\7\1\40\1\41\1\7\1\42"+
    "\1\7\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\4\7\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\103\72\1\73\107\0\1\6\1\7\4\0\1\7"+
    "\1\6\2\7\1\74\10\0\3\7\2\0\16\7\3\0"+
    "\17\7\7\0\1\6\4\0\2\7\2\0\6\7\10\0"+
    "\4\7\2\0\16\7\3\0\21\7\5\0\1\7\6\0"+
    "\1\75\1\0\1\76\105\0\1\77\1\0\1\100\12\0"+
    "\1\101\5\0\1\102\2\0\1\103\47\0\2\7\2\0"+
    "\6\7\10\0\1\7\1\104\2\7\2\0\16\7\3\0"+
    "\21\7\5\0\1\7\4\0\2\7\2\0\6\7\10\0"+
    "\3\7\1\105\2\0\16\7\3\0\21\7\5\0\1\7"+
    "\4\0\1\106\6\0\1\106\67\0\1\106\53\0\1\107"+
    "\34\0\2\7\2\0\6\7\10\0\4\7\2\0\12\7"+
    "\1\110\3\7\3\0\21\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\3\7\1\104\2\0\16\7\3\0"+
    "\21\7\5\0\1\7\4\0\2\7\2\0\6\7\10\0"+
    "\4\7\2\0\14\7\1\111\1\7\3\0\21\7\5\0"+
    "\1\7\4\0\2\7\2\0\6\7\10\0\4\7\2\0"+
    "\1\7\1\112\14\7\3\0\21\7\5\0\1\7\4\0"+
    "\2\7\2\0\6\7\10\0\4\7\2\0\3\7\1\112"+
    "\12\7\3\0\21\7\5\0\1\7\4\0\2\7\2\0"+
    "\6\7\10\0\4\7\2\0\5\7\1\113\10\7\3\0"+
    "\21\7\5\0\1\7\4\0\2\7\2\0\6\7\10\0"+
    "\4\7\2\0\16\7\3\0\13\7\1\114\5\7\5\0"+
    "\1\7\4\0\2\7\2\0\6\7\10\0\4\7\2\0"+
    "\10\7\1\115\5\7\3\0\21\7\5\0\1\7\4\0"+
    "\2\7\2\0\6\7\10\0\4\7\2\0\16\7\3\0"+
    "\16\7\1\116\2\7\5\0\1\7\4\0\2\7\2\0"+
    "\6\7\10\0\1\7\1\117\2\7\2\0\16\7\3\0"+
    "\1\7\1\120\17\7\5\0\1\7\4\0\2\7\2\0"+
    "\6\7\10\0\3\7\1\121\2\0\16\7\3\0\3\7"+
    "\1\122\15\7\5\0\1\7\53\0\1\44\34\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\16\7\3\0\1\7"+
    "\1\123\17\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\6\7\1\124\7\7\3\0\21\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\4\7"+
    "\2\0\16\7\3\0\3\7\1\125\15\7\5\0\1\7"+
    "\4\0\2\7\2\0\6\7\10\0\4\7\2\0\11\7"+
    "\1\126\4\7\3\0\21\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\1\7\1\127\2\7\2\0\16\7"+
    "\3\0\21\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\16\7\3\0\12\7\1\130\6\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\1\7"+
    "\1\131\2\7\2\0\16\7\3\0\21\7\5\0\1\7"+
    "\4\0\2\7\2\0\6\7\10\0\4\7\2\0\16\7"+
    "\3\0\12\7\1\132\6\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\16\7\3\0\15\7"+
    "\1\133\3\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\3\7\1\134\2\0\16\7\3\0\21\7\5\0"+
    "\1\7\4\0\2\7\2\0\6\7\10\0\4\7\2\0"+
    "\16\7\3\0\15\7\1\132\3\7\5\0\1\7\4\0"+
    "\1\135\6\0\1\135\2\0\1\136\64\0\1\137\4\0"+
    "\1\6\1\7\4\0\1\7\1\6\2\7\1\136\10\0"+
    "\3\7\2\0\16\7\3\0\17\7\7\0\1\6\1\0"+
    "\103\72\4\0\1\140\6\0\1\140\67\0\1\140\1\0"+
    "\1\75\1\141\4\75\1\142\75\75\7\76\1\143\74\76"+
    "\12\0\1\144\67\0\1\144\4\0\1\145\5\0\2\145"+
    "\1\0\1\145\11\0\3\145\3\0\1\145\1\0\1\145"+
    "\15\0\4\145\4\0\1\145\15\0\1\145\4\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\3\7\1\146\12\7"+
    "\3\0\21\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\13\7\1\147\2\7\3\0\21\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\4\7"+
    "\2\0\15\7\1\150\3\0\21\7\5\0\1\7\4\0"+
    "\2\7\2\0\6\7\10\0\1\7\1\151\2\7\2\0"+
    "\16\7\3\0\21\7\5\0\1\7\4\0\2\7\2\0"+
    "\6\7\10\0\4\7\2\0\4\7\1\152\11\7\3\0"+
    "\21\7\5\0\1\7\4\0\2\7\2\0\6\7\10\0"+
    "\3\7\1\153\2\0\16\7\3\0\21\7\5\0\1\7"+
    "\4\0\2\7\2\0\6\7\10\0\4\7\2\0\7\7"+
    "\1\152\6\7\3\0\21\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\4\7\1\154\11\7"+
    "\3\0\21\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\16\7\3\0\4\7\1\155\14\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\4\7"+
    "\2\0\7\7\1\154\6\7\3\0\21\7\5\0\1\7"+
    "\4\0\2\7\2\0\6\7\10\0\4\7\2\0\16\7"+
    "\3\0\6\7\1\156\12\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\12\7\1\157\1\160"+
    "\2\7\3\0\21\7\5\0\1\7\4\0\2\7\2\0"+
    "\6\7\10\0\4\7\2\0\16\7\3\0\10\7\1\161"+
    "\10\7\5\0\1\7\4\0\2\7\2\0\6\7\10\0"+
    "\4\7\2\0\14\7\1\162\1\163\3\0\21\7\5\0"+
    "\1\7\4\0\2\7\2\0\5\7\1\161\10\0\4\7"+
    "\2\0\16\7\3\0\21\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\1\7\1\146\14\7"+
    "\3\0\21\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\1\164\15\7\3\0\13\7\1\165"+
    "\5\7\5\0\1\7\4\0\2\7\2\0\6\7\10\0"+
    "\4\7\2\0\16\7\3\0\1\7\1\166\17\7\5\0"+
    "\1\7\4\0\2\7\2\0\6\7\10\0\4\7\2\0"+
    "\2\7\1\167\13\7\3\0\16\7\1\170\2\7\5\0"+
    "\1\7\4\0\2\7\2\0\6\7\10\0\4\7\2\0"+
    "\16\7\3\0\3\7\1\171\15\7\5\0\1\7\4\0"+
    "\1\135\6\0\1\135\2\0\1\74\64\0\1\135\4\0"+
    "\1\135\6\0\1\135\2\0\1\136\64\0\1\135\1\0"+
    "\5\76\1\172\1\76\1\143\74\76\3\0\2\7\2\0"+
    "\6\7\10\0\1\7\1\173\2\7\2\0\16\7\3\0"+
    "\21\7\5\0\1\7\4\0\2\7\2\0\6\7\10\0"+
    "\3\7\1\173\2\0\16\7\3\0\21\7\5\0\1\7"+
    "\4\0\2\7\2\0\6\7\10\0\4\7\2\0\6\7"+
    "\1\174\7\7\3\0\21\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\11\7\1\174\4\7"+
    "\3\0\21\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\16\7\3\0\5\7\1\175\13\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\4\7"+
    "\2\0\16\7\3\0\7\7\1\175\11\7\5\0\1\7"+
    "\4\0\2\7\2\0\6\7\10\0\4\7\2\0\12\7"+
    "\1\176\3\7\3\0\21\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\1\7\1\177\2\7\2\0\16\7"+
    "\3\0\21\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\14\7\1\176\1\7\3\0\21\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\3\7"+
    "\1\177\2\0\16\7\3\0\21\7\5\0\1\7\4\0"+
    "\2\7\2\0\6\7\10\0\4\7\2\0\6\7\1\200"+
    "\7\7\3\0\21\7\5\0\1\7\4\0\2\7\2\0"+
    "\6\7\10\0\4\7\2\0\16\7\3\0\1\201\20\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\4\7"+
    "\2\0\16\7\3\0\10\7\1\202\10\7\5\0\1\7"+
    "\4\0\2\7\2\0\6\7\10\0\4\7\2\0\11\7"+
    "\1\203\4\7\3\0\21\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\16\7\3\0\2\7"+
    "\1\201\16\7\5\0\1\7\4\0\2\7\2\0\5\7"+
    "\1\204\10\0\4\7\2\0\16\7\3\0\21\7\5\0"+
    "\1\7\4\0\2\7\2\0\6\7\10\0\4\7\2\0"+
    "\4\7\1\205\11\7\3\0\21\7\5\0\1\7\4\0"+
    "\2\7\2\0\6\7\10\0\4\7\2\0\1\206\15\7"+
    "\3\0\21\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\7\7\1\207\6\7\3\0\21\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\4\7"+
    "\2\0\2\7\1\210\13\7\3\0\21\7\5\0\1\7"+
    "\4\0\2\7\2\0\6\7\10\0\4\7\2\0\12\7"+
    "\1\211\3\7\3\0\21\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\6\7\1\212\7\7"+
    "\3\0\21\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\14\7\1\213\1\7\3\0\21\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\4\7"+
    "\2\0\11\7\1\214\4\7\3\0\21\7\5\0\1\7"+
    "\4\0\2\7\2\0\6\7\10\0\4\7\2\0\6\7"+
    "\1\215\7\7\3\0\21\7\5\0\1\7\4\0\2\7"+
    "\2\0\6\7\10\0\4\7\2\0\4\7\1\216\11\7"+
    "\3\0\21\7\5\0\1\7\4\0\2\7\2\0\6\7"+
    "\10\0\4\7\2\0\11\7\1\215\4\7\3\0\21\7"+
    "\5\0\1\7\4\0\2\7\2\0\6\7\10\0\4\7"+
    "\2\0\7\7\1\216\6\7\3\0\21\7\5\0\1\7"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6324];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\3\11\3\1\1\11\4\1\2\11\1\1"+
    "\5\11\3\1\2\11\11\1\1\11\16\1\5\11\1\1"+
    "\1\11\1\1\1\11\5\0\3\11\3\1\1\11\26\1"+
    "\1\0\3\1\1\11\1\0\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int getChar()
    {
	return yychar + 1;
    }

    public int getLine()
    {
	return yyline + 1;
    }

    public String getText()
    {
	return yytext();
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SMPLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SMPLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return new Symbol(sym.MOD);
          }
        case 56: break;
        case 5: 
          { // INTEGER
	       		return new Symbol(sym.INTEGER, new Integer(yytext()));
          }
        case 57: break;
        case 8: 
          { return new Symbol(sym.TIMES);
          }
        case 58: break;
        case 12: 
          { return new Symbol(sym.COLON);
          }
        case 59: break;
        case 51: 
          { return new Symbol(sym.PROC);
          }
        case 60: break;
        case 24: 
          { return new Symbol(sym.AMP);
          }
        case 61: break;
        case 31: 
          { return new Symbol(sym.FALSE, yytext());
          }
        case 62: break;
        case 36: 
          { return new Symbol(sym.IF);
          }
        case 63: break;
        case 39: 
          { // ignore line comments
          }
        case 64: break;
        case 16: 
          { return new Symbol(sym.RBRACKET);
          }
        case 65: break;
        case 41: 
          { return new Symbol(sym.DEF);
          }
        case 66: break;
        case 17: 
          { return new Symbol(sym.QUESTION);
          }
        case 67: break;
        case 37: 
          { return new Symbol(sym.OR);
          }
        case 68: break;
        case 55: 
          { return new Symbol(sym.READINT);
          }
        case 69: break;
        case 27: 
          { return new Symbol(sym.AT);
          }
        case 70: break;
        case 38: 
          { // Real numbers
			return new Symbol(sym.REAL, new Double(yytext()));
          }
        case 71: break;
        case 40: 
          { return new Symbol(sym.BINHEX, yytext());
          }
        case 72: break;
        case 14: 
          { return new Symbol(sym.RPAREN);
          }
        case 73: break;
        case 43: 
          { return new Symbol(sym.LET);
          }
        case 74: break;
        case 22: 
          { return new Symbol(sym.MINUS);
          }
        case 75: break;
        case 21: 
          { return new Symbol(sym.PLUS);
          }
        case 76: break;
        case 29: 
          { yybegin(YYINITIAL);
          }
        case 77: break;
        case 33: 
          { return new Symbol(sym.BE);
          }
        case 78: break;
        case 53: 
          { return new Symbol(sym.PRINT);
          }
        case 79: break;
        case 6: 
          { // IDENTIFIER
			return new Symbol(sym.VAR, yytext());
          }
        case 80: break;
        case 50: 
          { return new Symbol(sym.CASE);
          }
        case 81: break;
        case 1: 
          { // constant string
			// System.out.println(yytext());
			return new Symbol(sym.STRING, yytext());
          }
        case 82: break;
        case 54: 
          { return new Symbol(sym.PRINTLN);
          }
        case 83: break;
        case 46: 
          { return new Symbol(sym.ELSE);
          }
        case 84: break;
        case 18: 
          { return new Symbol(sym.LBRACE);
          }
        case 85: break;
        case 10: 
          { return new Symbol(sym.COMMA);
          }
        case 86: break;
        case 47: 
          { return new Symbol(sym.THEN);
          }
        case 87: break;
        case 2: 
          { throw new java.io.IOException("Unrecognised character: " +
							yytext());
          }
        case 88: break;
        case 32: 
          { return new Symbol(sym.TRUE, yytext());
          }
        case 89: break;
        case 26: 
          { return new Symbol(sym.TILDE);
          }
        case 90: break;
        case 35: 
          { return new Symbol(sym.ASSIGN);
          }
        case 91: break;
        case 20: 
          { return new Symbol(sym.CMP, yytext());
          }
        case 92: break;
        case 30: 
          { return new Symbol(sym.NIL, yytext());
          }
        case 93: break;
        case 48: 
          { return new Symbol(sym.LAZY);
          }
        case 94: break;
        case 9: 
          { //. on a line by itself is EOF
			  return new Symbol(sym.EOF);
          }
        case 95: break;
        case 28: 
          { yybegin(STRING);
          }
        case 96: break;
        case 11: 
          { return new Symbol(sym.SEMI);
          }
        case 97: break;
        case 49: 
          { return new Symbol(sym.CALL);
          }
        case 98: break;
        case 25: 
          { return new Symbol(sym.PIPE);
          }
        case 99: break;
        case 4: 
          { // ignore whitespace
          }
        case 100: break;
        case 3: 
          { //skip newline, but reset char counter
                        yychar = 0;
          }
        case 101: break;
        case 52: 
          { return new Symbol(sym.READ);
          }
        case 102: break;
        case 13: 
          { return new Symbol(sym.LPAREN);
          }
        case 103: break;
        case 45: 
          { // ignore block comments
          }
        case 104: break;
        case 15: 
          { return new Symbol(sym.LBRACKET);
          }
        case 105: break;
        case 44: 
          { return new Symbol(sym.AND);
          }
        case 106: break;
        case 42: 
          { return new Symbol(sym.NOT);
          }
        case 107: break;
        case 19: 
          { return new Symbol(sym.RBRACE);
          }
        case 108: break;
        case 7: 
          { return new Symbol(sym.DIV);
          }
        case 109: break;
        case 34: 
          { // FRACTION
			return new Symbol(sym.FRACTION, new Double(yytext()));
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return new Symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
